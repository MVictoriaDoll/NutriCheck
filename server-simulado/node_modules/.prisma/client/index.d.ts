
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Receipt
 * 
 */
export type Receipt = $Result.DefaultSelection<Prisma.$ReceiptPayload>
/**
 * Model Item
 * 
 */
export type Item = $Result.DefaultSelection<Prisma.$ItemPayload>
/**
 * Model UserNutritionSummary
 * 
 */
export type UserNutritionSummary = $Result.DefaultSelection<Prisma.$UserNutritionSummaryPayload>
/**
 * Model GroceryList
 * 
 */
export type GroceryList = $Result.DefaultSelection<Prisma.$GroceryListPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.receipt`: Exposes CRUD operations for the **Receipt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Receipts
    * const receipts = await prisma.receipt.findMany()
    * ```
    */
  get receipt(): Prisma.ReceiptDelegate<ExtArgs>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<ExtArgs>;

  /**
   * `prisma.userNutritionSummary`: Exposes CRUD operations for the **UserNutritionSummary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserNutritionSummaries
    * const userNutritionSummaries = await prisma.userNutritionSummary.findMany()
    * ```
    */
  get userNutritionSummary(): Prisma.UserNutritionSummaryDelegate<ExtArgs>;

  /**
   * `prisma.groceryList`: Exposes CRUD operations for the **GroceryList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroceryLists
    * const groceryLists = await prisma.groceryList.findMany()
    * ```
    */
  get groceryList(): Prisma.GroceryListDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Receipt: 'Receipt',
    Item: 'Item',
    UserNutritionSummary: 'UserNutritionSummary',
    GroceryList: 'GroceryList'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "receipt" | "item" | "userNutritionSummary" | "groceryList"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Receipt: {
        payload: Prisma.$ReceiptPayload<ExtArgs>
        fields: Prisma.ReceiptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceiptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceiptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          findFirst: {
            args: Prisma.ReceiptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceiptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          findMany: {
            args: Prisma.ReceiptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>[]
          }
          create: {
            args: Prisma.ReceiptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          createMany: {
            args: Prisma.ReceiptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReceiptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          update: {
            args: Prisma.ReceiptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          deleteMany: {
            args: Prisma.ReceiptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceiptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReceiptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptPayload>
          }
          aggregate: {
            args: Prisma.ReceiptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceipt>
          }
          groupBy: {
            args: Prisma.ReceiptGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ReceiptFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ReceiptAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ReceiptCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptCountAggregateOutputType> | number
          }
        }
      }
      Item: {
        payload: Prisma.$ItemPayload<ExtArgs>
        fields: Prisma.ItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findFirst: {
            args: Prisma.ItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findMany: {
            args: Prisma.ItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          create: {
            args: Prisma.ItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          createMany: {
            args: Prisma.ItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          update: {
            args: Prisma.ItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          deleteMany: {
            args: Prisma.ItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          aggregate: {
            args: Prisma.ItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItem>
          }
          groupBy: {
            args: Prisma.ItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ItemFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ItemAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ItemCountArgs<ExtArgs>
            result: $Utils.Optional<ItemCountAggregateOutputType> | number
          }
        }
      }
      UserNutritionSummary: {
        payload: Prisma.$UserNutritionSummaryPayload<ExtArgs>
        fields: Prisma.UserNutritionSummaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserNutritionSummaryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNutritionSummaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserNutritionSummaryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNutritionSummaryPayload>
          }
          findFirst: {
            args: Prisma.UserNutritionSummaryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNutritionSummaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserNutritionSummaryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNutritionSummaryPayload>
          }
          findMany: {
            args: Prisma.UserNutritionSummaryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNutritionSummaryPayload>[]
          }
          create: {
            args: Prisma.UserNutritionSummaryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNutritionSummaryPayload>
          }
          createMany: {
            args: Prisma.UserNutritionSummaryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserNutritionSummaryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNutritionSummaryPayload>
          }
          update: {
            args: Prisma.UserNutritionSummaryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNutritionSummaryPayload>
          }
          deleteMany: {
            args: Prisma.UserNutritionSummaryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserNutritionSummaryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserNutritionSummaryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNutritionSummaryPayload>
          }
          aggregate: {
            args: Prisma.UserNutritionSummaryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserNutritionSummary>
          }
          groupBy: {
            args: Prisma.UserNutritionSummaryGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserNutritionSummaryGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserNutritionSummaryFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserNutritionSummaryAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserNutritionSummaryCountArgs<ExtArgs>
            result: $Utils.Optional<UserNutritionSummaryCountAggregateOutputType> | number
          }
        }
      }
      GroceryList: {
        payload: Prisma.$GroceryListPayload<ExtArgs>
        fields: Prisma.GroceryListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroceryListFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroceryListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroceryListFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroceryListPayload>
          }
          findFirst: {
            args: Prisma.GroceryListFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroceryListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroceryListFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroceryListPayload>
          }
          findMany: {
            args: Prisma.GroceryListFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroceryListPayload>[]
          }
          create: {
            args: Prisma.GroceryListCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroceryListPayload>
          }
          createMany: {
            args: Prisma.GroceryListCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GroceryListDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroceryListPayload>
          }
          update: {
            args: Prisma.GroceryListUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroceryListPayload>
          }
          deleteMany: {
            args: Prisma.GroceryListDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroceryListUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GroceryListUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroceryListPayload>
          }
          aggregate: {
            args: Prisma.GroceryListAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroceryList>
          }
          groupBy: {
            args: Prisma.GroceryListGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroceryListGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.GroceryListFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.GroceryListAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.GroceryListCountArgs<ExtArgs>
            result: $Utils.Optional<GroceryListCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    receipts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipts?: boolean | UserCountOutputTypeCountReceiptsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptWhereInput
  }


  /**
   * Count Type ReceiptCountOutputType
   */

  export type ReceiptCountOutputType = {
    items: number
  }

  export type ReceiptCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ReceiptCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * ReceiptCountOutputType without action
   */
  export type ReceiptCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptCountOutputType
     */
    select?: ReceiptCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReceiptCountOutputType without action
   */
  export type ReceiptCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    lastLogin: Date | null
    displayName: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    lastLogin: Date | null
    displayName: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    lastLogin: number
    displayName: number
    preferences: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    lastLogin?: true
    displayName?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    lastLogin?: true
    displayName?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    lastLogin?: true
    displayName?: true
    preferences?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    createdAt: Date
    lastLogin: Date
    displayName: string | null
    preferences: JsonValue | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    lastLogin?: boolean
    displayName?: boolean
    preferences?: boolean
    receipts?: boolean | User$receiptsArgs<ExtArgs>
    nutritionSummary?: boolean | User$nutritionSummaryArgs<ExtArgs>
    groceryList?: boolean | User$groceryListArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    lastLogin?: boolean
    displayName?: boolean
    preferences?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipts?: boolean | User$receiptsArgs<ExtArgs>
    nutritionSummary?: boolean | User$nutritionSummaryArgs<ExtArgs>
    groceryList?: boolean | User$groceryListArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      receipts: Prisma.$ReceiptPayload<ExtArgs>[]
      nutritionSummary: Prisma.$UserNutritionSummaryPayload<ExtArgs> | null
      groceryList: Prisma.$GroceryListPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      lastLogin: Date
      displayName: string | null
      preferences: Prisma.JsonValue | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    receipts<T extends User$receiptsArgs<ExtArgs> = {}>(args?: Subset<T, User$receiptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findMany"> | Null>
    nutritionSummary<T extends User$nutritionSummaryArgs<ExtArgs> = {}>(args?: Subset<T, User$nutritionSummaryArgs<ExtArgs>>): Prisma__UserNutritionSummaryClient<$Result.GetResult<Prisma.$UserNutritionSummaryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    groceryList<T extends User$groceryListArgs<ExtArgs> = {}>(args?: Subset<T, User$groceryListArgs<ExtArgs>>): Prisma__GroceryListClient<$Result.GetResult<Prisma.$GroceryListPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly displayName: FieldRef<"User", 'String'>
    readonly preferences: FieldRef<"User", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.receipts
   */
  export type User$receiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    where?: ReceiptWhereInput
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    cursor?: ReceiptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * User.nutritionSummary
   */
  export type User$nutritionSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNutritionSummary
     */
    select?: UserNutritionSummarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNutritionSummaryInclude<ExtArgs> | null
    where?: UserNutritionSummaryWhereInput
  }

  /**
   * User.groceryList
   */
  export type User$groceryListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroceryList
     */
    select?: GroceryListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroceryListInclude<ExtArgs> | null
    where?: GroceryListWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Receipt
   */

  export type AggregateReceipt = {
    _count: ReceiptCountAggregateOutputType | null
    _avg: ReceiptAvgAggregateOutputType | null
    _sum: ReceiptSumAggregateOutputType | null
    _min: ReceiptMinAggregateOutputType | null
    _max: ReceiptMaxAggregateOutputType | null
  }

  export type ReceiptAvgAggregateOutputType = {
    totalAmount: number | null
  }

  export type ReceiptSumAggregateOutputType = {
    totalAmount: number | null
  }

  export type ReceiptMinAggregateOutputType = {
    id: string | null
    uploadedAt: Date | null
    purchaseDate: Date | null
    imageUrl: string | null
    originalRawText: string | null
    totalAmount: number | null
    currency: string | null
    aiFeedbackReceipt: string | null
    status: string | null
    userId: string | null
  }

  export type ReceiptMaxAggregateOutputType = {
    id: string | null
    uploadedAt: Date | null
    purchaseDate: Date | null
    imageUrl: string | null
    originalRawText: string | null
    totalAmount: number | null
    currency: string | null
    aiFeedbackReceipt: string | null
    status: string | null
    userId: string | null
  }

  export type ReceiptCountAggregateOutputType = {
    id: number
    uploadedAt: number
    purchaseDate: number
    imageUrl: number
    originalRawText: number
    totalAmount: number
    currency: number
    nutritionSummary: number
    aiFeedbackReceipt: number
    status: number
    userId: number
    _all: number
  }


  export type ReceiptAvgAggregateInputType = {
    totalAmount?: true
  }

  export type ReceiptSumAggregateInputType = {
    totalAmount?: true
  }

  export type ReceiptMinAggregateInputType = {
    id?: true
    uploadedAt?: true
    purchaseDate?: true
    imageUrl?: true
    originalRawText?: true
    totalAmount?: true
    currency?: true
    aiFeedbackReceipt?: true
    status?: true
    userId?: true
  }

  export type ReceiptMaxAggregateInputType = {
    id?: true
    uploadedAt?: true
    purchaseDate?: true
    imageUrl?: true
    originalRawText?: true
    totalAmount?: true
    currency?: true
    aiFeedbackReceipt?: true
    status?: true
    userId?: true
  }

  export type ReceiptCountAggregateInputType = {
    id?: true
    uploadedAt?: true
    purchaseDate?: true
    imageUrl?: true
    originalRawText?: true
    totalAmount?: true
    currency?: true
    nutritionSummary?: true
    aiFeedbackReceipt?: true
    status?: true
    userId?: true
    _all?: true
  }

  export type ReceiptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Receipt to aggregate.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Receipts
    **/
    _count?: true | ReceiptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptMaxAggregateInputType
  }

  export type GetReceiptAggregateType<T extends ReceiptAggregateArgs> = {
        [P in keyof T & keyof AggregateReceipt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceipt[P]>
      : GetScalarType<T[P], AggregateReceipt[P]>
  }




  export type ReceiptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptWhereInput
    orderBy?: ReceiptOrderByWithAggregationInput | ReceiptOrderByWithAggregationInput[]
    by: ReceiptScalarFieldEnum[] | ReceiptScalarFieldEnum
    having?: ReceiptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptCountAggregateInputType | true
    _avg?: ReceiptAvgAggregateInputType
    _sum?: ReceiptSumAggregateInputType
    _min?: ReceiptMinAggregateInputType
    _max?: ReceiptMaxAggregateInputType
  }

  export type ReceiptGroupByOutputType = {
    id: string
    uploadedAt: Date
    purchaseDate: Date
    imageUrl: string
    originalRawText: string
    totalAmount: number
    currency: string
    nutritionSummary: JsonValue | null
    aiFeedbackReceipt: string | null
    status: string
    userId: string
    _count: ReceiptCountAggregateOutputType | null
    _avg: ReceiptAvgAggregateOutputType | null
    _sum: ReceiptSumAggregateOutputType | null
    _min: ReceiptMinAggregateOutputType | null
    _max: ReceiptMaxAggregateOutputType | null
  }

  type GetReceiptGroupByPayload<T extends ReceiptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptGroupByOutputType[P]>
        }
      >
    >


  export type ReceiptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uploadedAt?: boolean
    purchaseDate?: boolean
    imageUrl?: boolean
    originalRawText?: boolean
    totalAmount?: boolean
    currency?: boolean
    nutritionSummary?: boolean
    aiFeedbackReceipt?: boolean
    status?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Receipt$itemsArgs<ExtArgs>
    _count?: boolean | ReceiptCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receipt"]>


  export type ReceiptSelectScalar = {
    id?: boolean
    uploadedAt?: boolean
    purchaseDate?: boolean
    imageUrl?: boolean
    originalRawText?: boolean
    totalAmount?: boolean
    currency?: boolean
    nutritionSummary?: boolean
    aiFeedbackReceipt?: boolean
    status?: boolean
    userId?: boolean
  }

  export type ReceiptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Receipt$itemsArgs<ExtArgs>
    _count?: boolean | ReceiptCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ReceiptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Receipt"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      items: Prisma.$ItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      uploadedAt: Date
      purchaseDate: Date
      imageUrl: string
      originalRawText: string
      totalAmount: number
      currency: string
      nutritionSummary: Prisma.JsonValue | null
      aiFeedbackReceipt: string | null
      status: string
      userId: string
    }, ExtArgs["result"]["receipt"]>
    composites: {}
  }

  type ReceiptGetPayload<S extends boolean | null | undefined | ReceiptDefaultArgs> = $Result.GetResult<Prisma.$ReceiptPayload, S>

  type ReceiptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReceiptFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReceiptCountAggregateInputType | true
    }

  export interface ReceiptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Receipt'], meta: { name: 'Receipt' } }
    /**
     * Find zero or one Receipt that matches the filter.
     * @param {ReceiptFindUniqueArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceiptFindUniqueArgs>(args: SelectSubset<T, ReceiptFindUniqueArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Receipt that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReceiptFindUniqueOrThrowArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceiptFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceiptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Receipt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptFindFirstArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceiptFindFirstArgs>(args?: SelectSubset<T, ReceiptFindFirstArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Receipt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptFindFirstOrThrowArgs} args - Arguments to find a Receipt
     * @example
     * // Get one Receipt
     * const receipt = await prisma.receipt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceiptFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceiptFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Receipts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Receipts
     * const receipts = await prisma.receipt.findMany()
     * 
     * // Get first 10 Receipts
     * const receipts = await prisma.receipt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptWithIdOnly = await prisma.receipt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceiptFindManyArgs>(args?: SelectSubset<T, ReceiptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Receipt.
     * @param {ReceiptCreateArgs} args - Arguments to create a Receipt.
     * @example
     * // Create one Receipt
     * const Receipt = await prisma.receipt.create({
     *   data: {
     *     // ... data to create a Receipt
     *   }
     * })
     * 
     */
    create<T extends ReceiptCreateArgs>(args: SelectSubset<T, ReceiptCreateArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Receipts.
     * @param {ReceiptCreateManyArgs} args - Arguments to create many Receipts.
     * @example
     * // Create many Receipts
     * const receipt = await prisma.receipt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceiptCreateManyArgs>(args?: SelectSubset<T, ReceiptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Receipt.
     * @param {ReceiptDeleteArgs} args - Arguments to delete one Receipt.
     * @example
     * // Delete one Receipt
     * const Receipt = await prisma.receipt.delete({
     *   where: {
     *     // ... filter to delete one Receipt
     *   }
     * })
     * 
     */
    delete<T extends ReceiptDeleteArgs>(args: SelectSubset<T, ReceiptDeleteArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Receipt.
     * @param {ReceiptUpdateArgs} args - Arguments to update one Receipt.
     * @example
     * // Update one Receipt
     * const receipt = await prisma.receipt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceiptUpdateArgs>(args: SelectSubset<T, ReceiptUpdateArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Receipts.
     * @param {ReceiptDeleteManyArgs} args - Arguments to filter Receipts to delete.
     * @example
     * // Delete a few Receipts
     * const { count } = await prisma.receipt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceiptDeleteManyArgs>(args?: SelectSubset<T, ReceiptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Receipts
     * const receipt = await prisma.receipt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceiptUpdateManyArgs>(args: SelectSubset<T, ReceiptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Receipt.
     * @param {ReceiptUpsertArgs} args - Arguments to update or create a Receipt.
     * @example
     * // Update or create a Receipt
     * const receipt = await prisma.receipt.upsert({
     *   create: {
     *     // ... data to create a Receipt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Receipt we want to update
     *   }
     * })
     */
    upsert<T extends ReceiptUpsertArgs>(args: SelectSubset<T, ReceiptUpsertArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Receipts that matches the filter.
     * @param {ReceiptFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const receipt = await prisma.receipt.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ReceiptFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Receipt.
     * @param {ReceiptAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const receipt = await prisma.receipt.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ReceiptAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Receipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptCountArgs} args - Arguments to filter Receipts to count.
     * @example
     * // Count the number of Receipts
     * const count = await prisma.receipt.count({
     *   where: {
     *     // ... the filter for the Receipts we want to count
     *   }
     * })
    **/
    count<T extends ReceiptCountArgs>(
      args?: Subset<T, ReceiptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Receipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptAggregateArgs>(args: Subset<T, ReceiptAggregateArgs>): Prisma.PrismaPromise<GetReceiptAggregateType<T>>

    /**
     * Group by Receipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiptGroupByArgs['orderBy'] }
        : { orderBy?: ReceiptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Receipt model
   */
  readonly fields: ReceiptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Receipt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceiptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends Receipt$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Receipt$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Receipt model
   */ 
  interface ReceiptFieldRefs {
    readonly id: FieldRef<"Receipt", 'String'>
    readonly uploadedAt: FieldRef<"Receipt", 'DateTime'>
    readonly purchaseDate: FieldRef<"Receipt", 'DateTime'>
    readonly imageUrl: FieldRef<"Receipt", 'String'>
    readonly originalRawText: FieldRef<"Receipt", 'String'>
    readonly totalAmount: FieldRef<"Receipt", 'Float'>
    readonly currency: FieldRef<"Receipt", 'String'>
    readonly nutritionSummary: FieldRef<"Receipt", 'Json'>
    readonly aiFeedbackReceipt: FieldRef<"Receipt", 'String'>
    readonly status: FieldRef<"Receipt", 'String'>
    readonly userId: FieldRef<"Receipt", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Receipt findUnique
   */
  export type ReceiptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt findUniqueOrThrow
   */
  export type ReceiptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt findFirst
   */
  export type ReceiptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receipts.
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receipts.
     */
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Receipt findFirstOrThrow
   */
  export type ReceiptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipt to fetch.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receipts.
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receipts.
     */
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Receipt findMany
   */
  export type ReceiptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter, which Receipts to fetch.
     */
    where?: ReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receipts to fetch.
     */
    orderBy?: ReceiptOrderByWithRelationInput | ReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Receipts.
     */
    cursor?: ReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receipts.
     */
    skip?: number
    distinct?: ReceiptScalarFieldEnum | ReceiptScalarFieldEnum[]
  }

  /**
   * Receipt create
   */
  export type ReceiptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * The data needed to create a Receipt.
     */
    data: XOR<ReceiptCreateInput, ReceiptUncheckedCreateInput>
  }

  /**
   * Receipt createMany
   */
  export type ReceiptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Receipts.
     */
    data: ReceiptCreateManyInput | ReceiptCreateManyInput[]
  }

  /**
   * Receipt update
   */
  export type ReceiptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * The data needed to update a Receipt.
     */
    data: XOR<ReceiptUpdateInput, ReceiptUncheckedUpdateInput>
    /**
     * Choose, which Receipt to update.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt updateMany
   */
  export type ReceiptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Receipts.
     */
    data: XOR<ReceiptUpdateManyMutationInput, ReceiptUncheckedUpdateManyInput>
    /**
     * Filter which Receipts to update
     */
    where?: ReceiptWhereInput
  }

  /**
   * Receipt upsert
   */
  export type ReceiptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * The filter to search for the Receipt to update in case it exists.
     */
    where: ReceiptWhereUniqueInput
    /**
     * In case the Receipt found by the `where` argument doesn't exist, create a new Receipt with this data.
     */
    create: XOR<ReceiptCreateInput, ReceiptUncheckedCreateInput>
    /**
     * In case the Receipt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiptUpdateInput, ReceiptUncheckedUpdateInput>
  }

  /**
   * Receipt delete
   */
  export type ReceiptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
    /**
     * Filter which Receipt to delete.
     */
    where: ReceiptWhereUniqueInput
  }

  /**
   * Receipt deleteMany
   */
  export type ReceiptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Receipts to delete
     */
    where?: ReceiptWhereInput
  }

  /**
   * Receipt findRaw
   */
  export type ReceiptFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Receipt aggregateRaw
   */
  export type ReceiptAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Receipt.items
   */
  export type Receipt$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Receipt without action
   */
  export type ReceiptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receipt
     */
    select?: ReceiptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptInclude<ExtArgs> | null
  }


  /**
   * Model Item
   */

  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    price: number | null
  }

  export type ItemSumAggregateOutputType = {
    price: number | null
  }

  export type ItemMinAggregateOutputType = {
    id: string | null
    originalBillLabel: string | null
    aiSuggestedName: string | null
    price: number | null
    isFoodItem: boolean | null
    classification: string | null
    manualCorrection: boolean | null
    receiptId: string | null
  }

  export type ItemMaxAggregateOutputType = {
    id: string | null
    originalBillLabel: string | null
    aiSuggestedName: string | null
    price: number | null
    isFoodItem: boolean | null
    classification: string | null
    manualCorrection: boolean | null
    receiptId: string | null
  }

  export type ItemCountAggregateOutputType = {
    id: number
    originalBillLabel: number
    aiSuggestedName: number
    price: number
    isFoodItem: number
    nutritionDetails: number
    classification: number
    manualCorrection: number
    receiptId: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    price?: true
  }

  export type ItemSumAggregateInputType = {
    price?: true
  }

  export type ItemMinAggregateInputType = {
    id?: true
    originalBillLabel?: true
    aiSuggestedName?: true
    price?: true
    isFoodItem?: true
    classification?: true
    manualCorrection?: true
    receiptId?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    originalBillLabel?: true
    aiSuggestedName?: true
    price?: true
    isFoodItem?: true
    classification?: true
    manualCorrection?: true
    receiptId?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    originalBillLabel?: true
    aiSuggestedName?: true
    price?: true
    isFoodItem?: true
    nutritionDetails?: true
    classification?: true
    manualCorrection?: true
    receiptId?: true
    _all?: true
  }

  export type ItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Item to aggregate.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithAggregationInput | ItemOrderByWithAggregationInput[]
    by: ItemScalarFieldEnum[] | ItemScalarFieldEnum
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }

  export type ItemGroupByOutputType = {
    id: string
    originalBillLabel: string
    aiSuggestedName: string
    price: number
    isFoodItem: boolean
    nutritionDetails: JsonValue | null
    classification: string | null
    manualCorrection: boolean
    receiptId: string
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type ItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originalBillLabel?: boolean
    aiSuggestedName?: boolean
    price?: boolean
    isFoodItem?: boolean
    nutritionDetails?: boolean
    classification?: boolean
    manualCorrection?: boolean
    receiptId?: boolean
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>


  export type ItemSelectScalar = {
    id?: boolean
    originalBillLabel?: boolean
    aiSuggestedName?: boolean
    price?: boolean
    isFoodItem?: boolean
    nutritionDetails?: boolean
    classification?: boolean
    manualCorrection?: boolean
    receiptId?: boolean
  }

  export type ItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipt?: boolean | ReceiptDefaultArgs<ExtArgs>
  }

  export type $ItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Item"
    objects: {
      receipt: Prisma.$ReceiptPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      originalBillLabel: string
      aiSuggestedName: string
      price: number
      isFoodItem: boolean
      nutritionDetails: Prisma.JsonValue | null
      classification: string | null
      manualCorrection: boolean
      receiptId: string
    }, ExtArgs["result"]["item"]>
    composites: {}
  }

  type ItemGetPayload<S extends boolean | null | undefined | ItemDefaultArgs> = $Result.GetResult<Prisma.$ItemPayload, S>

  type ItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface ItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Item'], meta: { name: 'Item' } }
    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemFindUniqueArgs>(args: SelectSubset<T, ItemFindUniqueArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Item that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemFindFirstArgs>(args?: SelectSubset<T, ItemFindFirstArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemFindManyArgs>(args?: SelectSubset<T, ItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
     */
    create<T extends ItemCreateArgs>(args: SelectSubset<T, ItemCreateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Items.
     * @param {ItemCreateManyArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemCreateManyArgs>(args?: SelectSubset<T, ItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
     */
    delete<T extends ItemDeleteArgs>(args: SelectSubset<T, ItemDeleteArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemUpdateArgs>(args: SelectSubset<T, ItemUpdateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemDeleteManyArgs>(args?: SelectSubset<T, ItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemUpdateManyArgs>(args: SelectSubset<T, ItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
     */
    upsert<T extends ItemUpsertArgs>(args: SelectSubset<T, ItemUpsertArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * @param {ItemFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const item = await prisma.item.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ItemFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Item.
     * @param {ItemAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const item = await prisma.item.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ItemAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Item model
   */
  readonly fields: ItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    receipt<T extends ReceiptDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReceiptDefaultArgs<ExtArgs>>): Prisma__ReceiptClient<$Result.GetResult<Prisma.$ReceiptPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Item model
   */ 
  interface ItemFieldRefs {
    readonly id: FieldRef<"Item", 'String'>
    readonly originalBillLabel: FieldRef<"Item", 'String'>
    readonly aiSuggestedName: FieldRef<"Item", 'String'>
    readonly price: FieldRef<"Item", 'Float'>
    readonly isFoodItem: FieldRef<"Item", 'Boolean'>
    readonly nutritionDetails: FieldRef<"Item", 'Json'>
    readonly classification: FieldRef<"Item", 'String'>
    readonly manualCorrection: FieldRef<"Item", 'Boolean'>
    readonly receiptId: FieldRef<"Item", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Item findUnique
   */
  export type ItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findUniqueOrThrow
   */
  export type ItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findFirst
   */
  export type ItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findFirstOrThrow
   */
  export type ItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findMany
   */
  export type ItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item create
   */
  export type ItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to create a Item.
     */
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }

  /**
   * Item createMany
   */
  export type ItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
  }

  /**
   * Item update
   */
  export type ItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to update a Item.
     */
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
  }

  /**
   * Item upsert
   */
  export type ItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The filter to search for the Item to update in case it exists.
     */
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     */
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }

  /**
   * Item delete
   */
  export type ItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter which Item to delete.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemWhereInput
  }

  /**
   * Item findRaw
   */
  export type ItemFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Item aggregateRaw
   */
  export type ItemAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Item without action
   */
  export type ItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
  }


  /**
   * Model UserNutritionSummary
   */

  export type AggregateUserNutritionSummary = {
    _count: UserNutritionSummaryCountAggregateOutputType | null
    _avg: UserNutritionSummaryAvgAggregateOutputType | null
    _sum: UserNutritionSummarySumAggregateOutputType | null
    _min: UserNutritionSummaryMinAggregateOutputType | null
    _max: UserNutritionSummaryMaxAggregateOutputType | null
  }

  export type UserNutritionSummaryAvgAggregateOutputType = {
    nutritionScore: number | null
    freshFoodsPercentage: number | null
    highSugarItemsPercentage: number | null
    processedFoodPercentage: number | null
    goodNutriScorePercentage: number | null
  }

  export type UserNutritionSummarySumAggregateOutputType = {
    nutritionScore: number | null
    freshFoodsPercentage: number | null
    highSugarItemsPercentage: number | null
    processedFoodPercentage: number | null
    goodNutriScorePercentage: number | null
  }

  export type UserNutritionSummaryMinAggregateOutputType = {
    id: string | null
    userId: string | null
    nutritionScore: number | null
    freshFoodsPercentage: number | null
    highSugarItemsPercentage: number | null
    processedFoodPercentage: number | null
    goodNutriScorePercentage: number | null
    overallAiFeedback: string | null
    lastUpdated: Date | null
  }

  export type UserNutritionSummaryMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    nutritionScore: number | null
    freshFoodsPercentage: number | null
    highSugarItemsPercentage: number | null
    processedFoodPercentage: number | null
    goodNutriScorePercentage: number | null
    overallAiFeedback: string | null
    lastUpdated: Date | null
  }

  export type UserNutritionSummaryCountAggregateOutputType = {
    id: number
    userId: number
    nutritionScore: number
    freshFoodsPercentage: number
    highSugarItemsPercentage: number
    processedFoodPercentage: number
    goodNutriScorePercentage: number
    overallAiFeedback: number
    lastUpdated: number
    _all: number
  }


  export type UserNutritionSummaryAvgAggregateInputType = {
    nutritionScore?: true
    freshFoodsPercentage?: true
    highSugarItemsPercentage?: true
    processedFoodPercentage?: true
    goodNutriScorePercentage?: true
  }

  export type UserNutritionSummarySumAggregateInputType = {
    nutritionScore?: true
    freshFoodsPercentage?: true
    highSugarItemsPercentage?: true
    processedFoodPercentage?: true
    goodNutriScorePercentage?: true
  }

  export type UserNutritionSummaryMinAggregateInputType = {
    id?: true
    userId?: true
    nutritionScore?: true
    freshFoodsPercentage?: true
    highSugarItemsPercentage?: true
    processedFoodPercentage?: true
    goodNutriScorePercentage?: true
    overallAiFeedback?: true
    lastUpdated?: true
  }

  export type UserNutritionSummaryMaxAggregateInputType = {
    id?: true
    userId?: true
    nutritionScore?: true
    freshFoodsPercentage?: true
    highSugarItemsPercentage?: true
    processedFoodPercentage?: true
    goodNutriScorePercentage?: true
    overallAiFeedback?: true
    lastUpdated?: true
  }

  export type UserNutritionSummaryCountAggregateInputType = {
    id?: true
    userId?: true
    nutritionScore?: true
    freshFoodsPercentage?: true
    highSugarItemsPercentage?: true
    processedFoodPercentage?: true
    goodNutriScorePercentage?: true
    overallAiFeedback?: true
    lastUpdated?: true
    _all?: true
  }

  export type UserNutritionSummaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserNutritionSummary to aggregate.
     */
    where?: UserNutritionSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNutritionSummaries to fetch.
     */
    orderBy?: UserNutritionSummaryOrderByWithRelationInput | UserNutritionSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserNutritionSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNutritionSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNutritionSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserNutritionSummaries
    **/
    _count?: true | UserNutritionSummaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserNutritionSummaryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserNutritionSummarySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserNutritionSummaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserNutritionSummaryMaxAggregateInputType
  }

  export type GetUserNutritionSummaryAggregateType<T extends UserNutritionSummaryAggregateArgs> = {
        [P in keyof T & keyof AggregateUserNutritionSummary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserNutritionSummary[P]>
      : GetScalarType<T[P], AggregateUserNutritionSummary[P]>
  }




  export type UserNutritionSummaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserNutritionSummaryWhereInput
    orderBy?: UserNutritionSummaryOrderByWithAggregationInput | UserNutritionSummaryOrderByWithAggregationInput[]
    by: UserNutritionSummaryScalarFieldEnum[] | UserNutritionSummaryScalarFieldEnum
    having?: UserNutritionSummaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserNutritionSummaryCountAggregateInputType | true
    _avg?: UserNutritionSummaryAvgAggregateInputType
    _sum?: UserNutritionSummarySumAggregateInputType
    _min?: UserNutritionSummaryMinAggregateInputType
    _max?: UserNutritionSummaryMaxAggregateInputType
  }

  export type UserNutritionSummaryGroupByOutputType = {
    id: string
    userId: string
    nutritionScore: number
    freshFoodsPercentage: number
    highSugarItemsPercentage: number
    processedFoodPercentage: number
    goodNutriScorePercentage: number
    overallAiFeedback: string | null
    lastUpdated: Date
    _count: UserNutritionSummaryCountAggregateOutputType | null
    _avg: UserNutritionSummaryAvgAggregateOutputType | null
    _sum: UserNutritionSummarySumAggregateOutputType | null
    _min: UserNutritionSummaryMinAggregateOutputType | null
    _max: UserNutritionSummaryMaxAggregateOutputType | null
  }

  type GetUserNutritionSummaryGroupByPayload<T extends UserNutritionSummaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserNutritionSummaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserNutritionSummaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserNutritionSummaryGroupByOutputType[P]>
            : GetScalarType<T[P], UserNutritionSummaryGroupByOutputType[P]>
        }
      >
    >


  export type UserNutritionSummarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nutritionScore?: boolean
    freshFoodsPercentage?: boolean
    highSugarItemsPercentage?: boolean
    processedFoodPercentage?: boolean
    goodNutriScorePercentage?: boolean
    overallAiFeedback?: boolean
    lastUpdated?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userNutritionSummary"]>


  export type UserNutritionSummarySelectScalar = {
    id?: boolean
    userId?: boolean
    nutritionScore?: boolean
    freshFoodsPercentage?: boolean
    highSugarItemsPercentage?: boolean
    processedFoodPercentage?: boolean
    goodNutriScorePercentage?: boolean
    overallAiFeedback?: boolean
    lastUpdated?: boolean
  }

  export type UserNutritionSummaryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserNutritionSummaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserNutritionSummary"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      nutritionScore: number
      freshFoodsPercentage: number
      highSugarItemsPercentage: number
      processedFoodPercentage: number
      goodNutriScorePercentage: number
      overallAiFeedback: string | null
      lastUpdated: Date
    }, ExtArgs["result"]["userNutritionSummary"]>
    composites: {}
  }

  type UserNutritionSummaryGetPayload<S extends boolean | null | undefined | UserNutritionSummaryDefaultArgs> = $Result.GetResult<Prisma.$UserNutritionSummaryPayload, S>

  type UserNutritionSummaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserNutritionSummaryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserNutritionSummaryCountAggregateInputType | true
    }

  export interface UserNutritionSummaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserNutritionSummary'], meta: { name: 'UserNutritionSummary' } }
    /**
     * Find zero or one UserNutritionSummary that matches the filter.
     * @param {UserNutritionSummaryFindUniqueArgs} args - Arguments to find a UserNutritionSummary
     * @example
     * // Get one UserNutritionSummary
     * const userNutritionSummary = await prisma.userNutritionSummary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserNutritionSummaryFindUniqueArgs>(args: SelectSubset<T, UserNutritionSummaryFindUniqueArgs<ExtArgs>>): Prisma__UserNutritionSummaryClient<$Result.GetResult<Prisma.$UserNutritionSummaryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserNutritionSummary that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserNutritionSummaryFindUniqueOrThrowArgs} args - Arguments to find a UserNutritionSummary
     * @example
     * // Get one UserNutritionSummary
     * const userNutritionSummary = await prisma.userNutritionSummary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserNutritionSummaryFindUniqueOrThrowArgs>(args: SelectSubset<T, UserNutritionSummaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserNutritionSummaryClient<$Result.GetResult<Prisma.$UserNutritionSummaryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserNutritionSummary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNutritionSummaryFindFirstArgs} args - Arguments to find a UserNutritionSummary
     * @example
     * // Get one UserNutritionSummary
     * const userNutritionSummary = await prisma.userNutritionSummary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserNutritionSummaryFindFirstArgs>(args?: SelectSubset<T, UserNutritionSummaryFindFirstArgs<ExtArgs>>): Prisma__UserNutritionSummaryClient<$Result.GetResult<Prisma.$UserNutritionSummaryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserNutritionSummary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNutritionSummaryFindFirstOrThrowArgs} args - Arguments to find a UserNutritionSummary
     * @example
     * // Get one UserNutritionSummary
     * const userNutritionSummary = await prisma.userNutritionSummary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserNutritionSummaryFindFirstOrThrowArgs>(args?: SelectSubset<T, UserNutritionSummaryFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserNutritionSummaryClient<$Result.GetResult<Prisma.$UserNutritionSummaryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserNutritionSummaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNutritionSummaryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserNutritionSummaries
     * const userNutritionSummaries = await prisma.userNutritionSummary.findMany()
     * 
     * // Get first 10 UserNutritionSummaries
     * const userNutritionSummaries = await prisma.userNutritionSummary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userNutritionSummaryWithIdOnly = await prisma.userNutritionSummary.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserNutritionSummaryFindManyArgs>(args?: SelectSubset<T, UserNutritionSummaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNutritionSummaryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserNutritionSummary.
     * @param {UserNutritionSummaryCreateArgs} args - Arguments to create a UserNutritionSummary.
     * @example
     * // Create one UserNutritionSummary
     * const UserNutritionSummary = await prisma.userNutritionSummary.create({
     *   data: {
     *     // ... data to create a UserNutritionSummary
     *   }
     * })
     * 
     */
    create<T extends UserNutritionSummaryCreateArgs>(args: SelectSubset<T, UserNutritionSummaryCreateArgs<ExtArgs>>): Prisma__UserNutritionSummaryClient<$Result.GetResult<Prisma.$UserNutritionSummaryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserNutritionSummaries.
     * @param {UserNutritionSummaryCreateManyArgs} args - Arguments to create many UserNutritionSummaries.
     * @example
     * // Create many UserNutritionSummaries
     * const userNutritionSummary = await prisma.userNutritionSummary.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserNutritionSummaryCreateManyArgs>(args?: SelectSubset<T, UserNutritionSummaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserNutritionSummary.
     * @param {UserNutritionSummaryDeleteArgs} args - Arguments to delete one UserNutritionSummary.
     * @example
     * // Delete one UserNutritionSummary
     * const UserNutritionSummary = await prisma.userNutritionSummary.delete({
     *   where: {
     *     // ... filter to delete one UserNutritionSummary
     *   }
     * })
     * 
     */
    delete<T extends UserNutritionSummaryDeleteArgs>(args: SelectSubset<T, UserNutritionSummaryDeleteArgs<ExtArgs>>): Prisma__UserNutritionSummaryClient<$Result.GetResult<Prisma.$UserNutritionSummaryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserNutritionSummary.
     * @param {UserNutritionSummaryUpdateArgs} args - Arguments to update one UserNutritionSummary.
     * @example
     * // Update one UserNutritionSummary
     * const userNutritionSummary = await prisma.userNutritionSummary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserNutritionSummaryUpdateArgs>(args: SelectSubset<T, UserNutritionSummaryUpdateArgs<ExtArgs>>): Prisma__UserNutritionSummaryClient<$Result.GetResult<Prisma.$UserNutritionSummaryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserNutritionSummaries.
     * @param {UserNutritionSummaryDeleteManyArgs} args - Arguments to filter UserNutritionSummaries to delete.
     * @example
     * // Delete a few UserNutritionSummaries
     * const { count } = await prisma.userNutritionSummary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserNutritionSummaryDeleteManyArgs>(args?: SelectSubset<T, UserNutritionSummaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserNutritionSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNutritionSummaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserNutritionSummaries
     * const userNutritionSummary = await prisma.userNutritionSummary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserNutritionSummaryUpdateManyArgs>(args: SelectSubset<T, UserNutritionSummaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserNutritionSummary.
     * @param {UserNutritionSummaryUpsertArgs} args - Arguments to update or create a UserNutritionSummary.
     * @example
     * // Update or create a UserNutritionSummary
     * const userNutritionSummary = await prisma.userNutritionSummary.upsert({
     *   create: {
     *     // ... data to create a UserNutritionSummary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserNutritionSummary we want to update
     *   }
     * })
     */
    upsert<T extends UserNutritionSummaryUpsertArgs>(args: SelectSubset<T, UserNutritionSummaryUpsertArgs<ExtArgs>>): Prisma__UserNutritionSummaryClient<$Result.GetResult<Prisma.$UserNutritionSummaryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more UserNutritionSummaries that matches the filter.
     * @param {UserNutritionSummaryFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const userNutritionSummary = await prisma.userNutritionSummary.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: UserNutritionSummaryFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UserNutritionSummary.
     * @param {UserNutritionSummaryAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const userNutritionSummary = await prisma.userNutritionSummary.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserNutritionSummaryAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of UserNutritionSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNutritionSummaryCountArgs} args - Arguments to filter UserNutritionSummaries to count.
     * @example
     * // Count the number of UserNutritionSummaries
     * const count = await prisma.userNutritionSummary.count({
     *   where: {
     *     // ... the filter for the UserNutritionSummaries we want to count
     *   }
     * })
    **/
    count<T extends UserNutritionSummaryCountArgs>(
      args?: Subset<T, UserNutritionSummaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserNutritionSummaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserNutritionSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNutritionSummaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserNutritionSummaryAggregateArgs>(args: Subset<T, UserNutritionSummaryAggregateArgs>): Prisma.PrismaPromise<GetUserNutritionSummaryAggregateType<T>>

    /**
     * Group by UserNutritionSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNutritionSummaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserNutritionSummaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserNutritionSummaryGroupByArgs['orderBy'] }
        : { orderBy?: UserNutritionSummaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserNutritionSummaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserNutritionSummaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserNutritionSummary model
   */
  readonly fields: UserNutritionSummaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserNutritionSummary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserNutritionSummaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserNutritionSummary model
   */ 
  interface UserNutritionSummaryFieldRefs {
    readonly id: FieldRef<"UserNutritionSummary", 'String'>
    readonly userId: FieldRef<"UserNutritionSummary", 'String'>
    readonly nutritionScore: FieldRef<"UserNutritionSummary", 'Float'>
    readonly freshFoodsPercentage: FieldRef<"UserNutritionSummary", 'Float'>
    readonly highSugarItemsPercentage: FieldRef<"UserNutritionSummary", 'Float'>
    readonly processedFoodPercentage: FieldRef<"UserNutritionSummary", 'Float'>
    readonly goodNutriScorePercentage: FieldRef<"UserNutritionSummary", 'Float'>
    readonly overallAiFeedback: FieldRef<"UserNutritionSummary", 'String'>
    readonly lastUpdated: FieldRef<"UserNutritionSummary", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserNutritionSummary findUnique
   */
  export type UserNutritionSummaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNutritionSummary
     */
    select?: UserNutritionSummarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNutritionSummaryInclude<ExtArgs> | null
    /**
     * Filter, which UserNutritionSummary to fetch.
     */
    where: UserNutritionSummaryWhereUniqueInput
  }

  /**
   * UserNutritionSummary findUniqueOrThrow
   */
  export type UserNutritionSummaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNutritionSummary
     */
    select?: UserNutritionSummarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNutritionSummaryInclude<ExtArgs> | null
    /**
     * Filter, which UserNutritionSummary to fetch.
     */
    where: UserNutritionSummaryWhereUniqueInput
  }

  /**
   * UserNutritionSummary findFirst
   */
  export type UserNutritionSummaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNutritionSummary
     */
    select?: UserNutritionSummarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNutritionSummaryInclude<ExtArgs> | null
    /**
     * Filter, which UserNutritionSummary to fetch.
     */
    where?: UserNutritionSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNutritionSummaries to fetch.
     */
    orderBy?: UserNutritionSummaryOrderByWithRelationInput | UserNutritionSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserNutritionSummaries.
     */
    cursor?: UserNutritionSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNutritionSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNutritionSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserNutritionSummaries.
     */
    distinct?: UserNutritionSummaryScalarFieldEnum | UserNutritionSummaryScalarFieldEnum[]
  }

  /**
   * UserNutritionSummary findFirstOrThrow
   */
  export type UserNutritionSummaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNutritionSummary
     */
    select?: UserNutritionSummarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNutritionSummaryInclude<ExtArgs> | null
    /**
     * Filter, which UserNutritionSummary to fetch.
     */
    where?: UserNutritionSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNutritionSummaries to fetch.
     */
    orderBy?: UserNutritionSummaryOrderByWithRelationInput | UserNutritionSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserNutritionSummaries.
     */
    cursor?: UserNutritionSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNutritionSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNutritionSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserNutritionSummaries.
     */
    distinct?: UserNutritionSummaryScalarFieldEnum | UserNutritionSummaryScalarFieldEnum[]
  }

  /**
   * UserNutritionSummary findMany
   */
  export type UserNutritionSummaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNutritionSummary
     */
    select?: UserNutritionSummarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNutritionSummaryInclude<ExtArgs> | null
    /**
     * Filter, which UserNutritionSummaries to fetch.
     */
    where?: UserNutritionSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNutritionSummaries to fetch.
     */
    orderBy?: UserNutritionSummaryOrderByWithRelationInput | UserNutritionSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserNutritionSummaries.
     */
    cursor?: UserNutritionSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNutritionSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNutritionSummaries.
     */
    skip?: number
    distinct?: UserNutritionSummaryScalarFieldEnum | UserNutritionSummaryScalarFieldEnum[]
  }

  /**
   * UserNutritionSummary create
   */
  export type UserNutritionSummaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNutritionSummary
     */
    select?: UserNutritionSummarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNutritionSummaryInclude<ExtArgs> | null
    /**
     * The data needed to create a UserNutritionSummary.
     */
    data: XOR<UserNutritionSummaryCreateInput, UserNutritionSummaryUncheckedCreateInput>
  }

  /**
   * UserNutritionSummary createMany
   */
  export type UserNutritionSummaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserNutritionSummaries.
     */
    data: UserNutritionSummaryCreateManyInput | UserNutritionSummaryCreateManyInput[]
  }

  /**
   * UserNutritionSummary update
   */
  export type UserNutritionSummaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNutritionSummary
     */
    select?: UserNutritionSummarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNutritionSummaryInclude<ExtArgs> | null
    /**
     * The data needed to update a UserNutritionSummary.
     */
    data: XOR<UserNutritionSummaryUpdateInput, UserNutritionSummaryUncheckedUpdateInput>
    /**
     * Choose, which UserNutritionSummary to update.
     */
    where: UserNutritionSummaryWhereUniqueInput
  }

  /**
   * UserNutritionSummary updateMany
   */
  export type UserNutritionSummaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserNutritionSummaries.
     */
    data: XOR<UserNutritionSummaryUpdateManyMutationInput, UserNutritionSummaryUncheckedUpdateManyInput>
    /**
     * Filter which UserNutritionSummaries to update
     */
    where?: UserNutritionSummaryWhereInput
  }

  /**
   * UserNutritionSummary upsert
   */
  export type UserNutritionSummaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNutritionSummary
     */
    select?: UserNutritionSummarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNutritionSummaryInclude<ExtArgs> | null
    /**
     * The filter to search for the UserNutritionSummary to update in case it exists.
     */
    where: UserNutritionSummaryWhereUniqueInput
    /**
     * In case the UserNutritionSummary found by the `where` argument doesn't exist, create a new UserNutritionSummary with this data.
     */
    create: XOR<UserNutritionSummaryCreateInput, UserNutritionSummaryUncheckedCreateInput>
    /**
     * In case the UserNutritionSummary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserNutritionSummaryUpdateInput, UserNutritionSummaryUncheckedUpdateInput>
  }

  /**
   * UserNutritionSummary delete
   */
  export type UserNutritionSummaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNutritionSummary
     */
    select?: UserNutritionSummarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNutritionSummaryInclude<ExtArgs> | null
    /**
     * Filter which UserNutritionSummary to delete.
     */
    where: UserNutritionSummaryWhereUniqueInput
  }

  /**
   * UserNutritionSummary deleteMany
   */
  export type UserNutritionSummaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserNutritionSummaries to delete
     */
    where?: UserNutritionSummaryWhereInput
  }

  /**
   * UserNutritionSummary findRaw
   */
  export type UserNutritionSummaryFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UserNutritionSummary aggregateRaw
   */
  export type UserNutritionSummaryAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UserNutritionSummary without action
   */
  export type UserNutritionSummaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNutritionSummary
     */
    select?: UserNutritionSummarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNutritionSummaryInclude<ExtArgs> | null
  }


  /**
   * Model GroceryList
   */

  export type AggregateGroceryList = {
    _count: GroceryListCountAggregateOutputType | null
    _min: GroceryListMinAggregateOutputType | null
    _max: GroceryListMaxAggregateOutputType | null
  }

  export type GroceryListMinAggregateOutputType = {
    id: string | null
    userId: string | null
    lastGenerated: Date | null
  }

  export type GroceryListMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    lastGenerated: Date | null
  }

  export type GroceryListCountAggregateOutputType = {
    id: number
    userId: number
    healthyItems: number
    missingNutritionItems: number
    sinItems: number
    lastGenerated: number
    _all: number
  }


  export type GroceryListMinAggregateInputType = {
    id?: true
    userId?: true
    lastGenerated?: true
  }

  export type GroceryListMaxAggregateInputType = {
    id?: true
    userId?: true
    lastGenerated?: true
  }

  export type GroceryListCountAggregateInputType = {
    id?: true
    userId?: true
    healthyItems?: true
    missingNutritionItems?: true
    sinItems?: true
    lastGenerated?: true
    _all?: true
  }

  export type GroceryListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroceryList to aggregate.
     */
    where?: GroceryListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroceryLists to fetch.
     */
    orderBy?: GroceryListOrderByWithRelationInput | GroceryListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroceryListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroceryLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroceryLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroceryLists
    **/
    _count?: true | GroceryListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroceryListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroceryListMaxAggregateInputType
  }

  export type GetGroceryListAggregateType<T extends GroceryListAggregateArgs> = {
        [P in keyof T & keyof AggregateGroceryList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroceryList[P]>
      : GetScalarType<T[P], AggregateGroceryList[P]>
  }




  export type GroceryListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroceryListWhereInput
    orderBy?: GroceryListOrderByWithAggregationInput | GroceryListOrderByWithAggregationInput[]
    by: GroceryListScalarFieldEnum[] | GroceryListScalarFieldEnum
    having?: GroceryListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroceryListCountAggregateInputType | true
    _min?: GroceryListMinAggregateInputType
    _max?: GroceryListMaxAggregateInputType
  }

  export type GroceryListGroupByOutputType = {
    id: string
    userId: string
    healthyItems: string[]
    missingNutritionItems: string[]
    sinItems: string[]
    lastGenerated: Date
    _count: GroceryListCountAggregateOutputType | null
    _min: GroceryListMinAggregateOutputType | null
    _max: GroceryListMaxAggregateOutputType | null
  }

  type GetGroceryListGroupByPayload<T extends GroceryListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroceryListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroceryListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroceryListGroupByOutputType[P]>
            : GetScalarType<T[P], GroceryListGroupByOutputType[P]>
        }
      >
    >


  export type GroceryListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    healthyItems?: boolean
    missingNutritionItems?: boolean
    sinItems?: boolean
    lastGenerated?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groceryList"]>


  export type GroceryListSelectScalar = {
    id?: boolean
    userId?: boolean
    healthyItems?: boolean
    missingNutritionItems?: boolean
    sinItems?: boolean
    lastGenerated?: boolean
  }

  export type GroceryListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GroceryListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroceryList"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      healthyItems: string[]
      missingNutritionItems: string[]
      sinItems: string[]
      lastGenerated: Date
    }, ExtArgs["result"]["groceryList"]>
    composites: {}
  }

  type GroceryListGetPayload<S extends boolean | null | undefined | GroceryListDefaultArgs> = $Result.GetResult<Prisma.$GroceryListPayload, S>

  type GroceryListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroceryListFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroceryListCountAggregateInputType | true
    }

  export interface GroceryListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroceryList'], meta: { name: 'GroceryList' } }
    /**
     * Find zero or one GroceryList that matches the filter.
     * @param {GroceryListFindUniqueArgs} args - Arguments to find a GroceryList
     * @example
     * // Get one GroceryList
     * const groceryList = await prisma.groceryList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroceryListFindUniqueArgs>(args: SelectSubset<T, GroceryListFindUniqueArgs<ExtArgs>>): Prisma__GroceryListClient<$Result.GetResult<Prisma.$GroceryListPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GroceryList that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GroceryListFindUniqueOrThrowArgs} args - Arguments to find a GroceryList
     * @example
     * // Get one GroceryList
     * const groceryList = await prisma.groceryList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroceryListFindUniqueOrThrowArgs>(args: SelectSubset<T, GroceryListFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroceryListClient<$Result.GetResult<Prisma.$GroceryListPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GroceryList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroceryListFindFirstArgs} args - Arguments to find a GroceryList
     * @example
     * // Get one GroceryList
     * const groceryList = await prisma.groceryList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroceryListFindFirstArgs>(args?: SelectSubset<T, GroceryListFindFirstArgs<ExtArgs>>): Prisma__GroceryListClient<$Result.GetResult<Prisma.$GroceryListPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GroceryList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroceryListFindFirstOrThrowArgs} args - Arguments to find a GroceryList
     * @example
     * // Get one GroceryList
     * const groceryList = await prisma.groceryList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroceryListFindFirstOrThrowArgs>(args?: SelectSubset<T, GroceryListFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroceryListClient<$Result.GetResult<Prisma.$GroceryListPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GroceryLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroceryListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroceryLists
     * const groceryLists = await prisma.groceryList.findMany()
     * 
     * // Get first 10 GroceryLists
     * const groceryLists = await prisma.groceryList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groceryListWithIdOnly = await prisma.groceryList.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroceryListFindManyArgs>(args?: SelectSubset<T, GroceryListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroceryListPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GroceryList.
     * @param {GroceryListCreateArgs} args - Arguments to create a GroceryList.
     * @example
     * // Create one GroceryList
     * const GroceryList = await prisma.groceryList.create({
     *   data: {
     *     // ... data to create a GroceryList
     *   }
     * })
     * 
     */
    create<T extends GroceryListCreateArgs>(args: SelectSubset<T, GroceryListCreateArgs<ExtArgs>>): Prisma__GroceryListClient<$Result.GetResult<Prisma.$GroceryListPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GroceryLists.
     * @param {GroceryListCreateManyArgs} args - Arguments to create many GroceryLists.
     * @example
     * // Create many GroceryLists
     * const groceryList = await prisma.groceryList.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroceryListCreateManyArgs>(args?: SelectSubset<T, GroceryListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GroceryList.
     * @param {GroceryListDeleteArgs} args - Arguments to delete one GroceryList.
     * @example
     * // Delete one GroceryList
     * const GroceryList = await prisma.groceryList.delete({
     *   where: {
     *     // ... filter to delete one GroceryList
     *   }
     * })
     * 
     */
    delete<T extends GroceryListDeleteArgs>(args: SelectSubset<T, GroceryListDeleteArgs<ExtArgs>>): Prisma__GroceryListClient<$Result.GetResult<Prisma.$GroceryListPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GroceryList.
     * @param {GroceryListUpdateArgs} args - Arguments to update one GroceryList.
     * @example
     * // Update one GroceryList
     * const groceryList = await prisma.groceryList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroceryListUpdateArgs>(args: SelectSubset<T, GroceryListUpdateArgs<ExtArgs>>): Prisma__GroceryListClient<$Result.GetResult<Prisma.$GroceryListPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GroceryLists.
     * @param {GroceryListDeleteManyArgs} args - Arguments to filter GroceryLists to delete.
     * @example
     * // Delete a few GroceryLists
     * const { count } = await prisma.groceryList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroceryListDeleteManyArgs>(args?: SelectSubset<T, GroceryListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroceryLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroceryListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroceryLists
     * const groceryList = await prisma.groceryList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroceryListUpdateManyArgs>(args: SelectSubset<T, GroceryListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GroceryList.
     * @param {GroceryListUpsertArgs} args - Arguments to update or create a GroceryList.
     * @example
     * // Update or create a GroceryList
     * const groceryList = await prisma.groceryList.upsert({
     *   create: {
     *     // ... data to create a GroceryList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroceryList we want to update
     *   }
     * })
     */
    upsert<T extends GroceryListUpsertArgs>(args: SelectSubset<T, GroceryListUpsertArgs<ExtArgs>>): Prisma__GroceryListClient<$Result.GetResult<Prisma.$GroceryListPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more GroceryLists that matches the filter.
     * @param {GroceryListFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const groceryList = await prisma.groceryList.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: GroceryListFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a GroceryList.
     * @param {GroceryListAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const groceryList = await prisma.groceryList.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: GroceryListAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of GroceryLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroceryListCountArgs} args - Arguments to filter GroceryLists to count.
     * @example
     * // Count the number of GroceryLists
     * const count = await prisma.groceryList.count({
     *   where: {
     *     // ... the filter for the GroceryLists we want to count
     *   }
     * })
    **/
    count<T extends GroceryListCountArgs>(
      args?: Subset<T, GroceryListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroceryListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroceryList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroceryListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroceryListAggregateArgs>(args: Subset<T, GroceryListAggregateArgs>): Prisma.PrismaPromise<GetGroceryListAggregateType<T>>

    /**
     * Group by GroceryList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroceryListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroceryListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroceryListGroupByArgs['orderBy'] }
        : { orderBy?: GroceryListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroceryListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroceryListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroceryList model
   */
  readonly fields: GroceryListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroceryList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroceryListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GroceryList model
   */ 
  interface GroceryListFieldRefs {
    readonly id: FieldRef<"GroceryList", 'String'>
    readonly userId: FieldRef<"GroceryList", 'String'>
    readonly healthyItems: FieldRef<"GroceryList", 'String[]'>
    readonly missingNutritionItems: FieldRef<"GroceryList", 'String[]'>
    readonly sinItems: FieldRef<"GroceryList", 'String[]'>
    readonly lastGenerated: FieldRef<"GroceryList", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GroceryList findUnique
   */
  export type GroceryListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroceryList
     */
    select?: GroceryListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroceryListInclude<ExtArgs> | null
    /**
     * Filter, which GroceryList to fetch.
     */
    where: GroceryListWhereUniqueInput
  }

  /**
   * GroceryList findUniqueOrThrow
   */
  export type GroceryListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroceryList
     */
    select?: GroceryListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroceryListInclude<ExtArgs> | null
    /**
     * Filter, which GroceryList to fetch.
     */
    where: GroceryListWhereUniqueInput
  }

  /**
   * GroceryList findFirst
   */
  export type GroceryListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroceryList
     */
    select?: GroceryListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroceryListInclude<ExtArgs> | null
    /**
     * Filter, which GroceryList to fetch.
     */
    where?: GroceryListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroceryLists to fetch.
     */
    orderBy?: GroceryListOrderByWithRelationInput | GroceryListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroceryLists.
     */
    cursor?: GroceryListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroceryLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroceryLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroceryLists.
     */
    distinct?: GroceryListScalarFieldEnum | GroceryListScalarFieldEnum[]
  }

  /**
   * GroceryList findFirstOrThrow
   */
  export type GroceryListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroceryList
     */
    select?: GroceryListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroceryListInclude<ExtArgs> | null
    /**
     * Filter, which GroceryList to fetch.
     */
    where?: GroceryListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroceryLists to fetch.
     */
    orderBy?: GroceryListOrderByWithRelationInput | GroceryListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroceryLists.
     */
    cursor?: GroceryListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroceryLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroceryLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroceryLists.
     */
    distinct?: GroceryListScalarFieldEnum | GroceryListScalarFieldEnum[]
  }

  /**
   * GroceryList findMany
   */
  export type GroceryListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroceryList
     */
    select?: GroceryListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroceryListInclude<ExtArgs> | null
    /**
     * Filter, which GroceryLists to fetch.
     */
    where?: GroceryListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroceryLists to fetch.
     */
    orderBy?: GroceryListOrderByWithRelationInput | GroceryListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroceryLists.
     */
    cursor?: GroceryListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroceryLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroceryLists.
     */
    skip?: number
    distinct?: GroceryListScalarFieldEnum | GroceryListScalarFieldEnum[]
  }

  /**
   * GroceryList create
   */
  export type GroceryListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroceryList
     */
    select?: GroceryListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroceryListInclude<ExtArgs> | null
    /**
     * The data needed to create a GroceryList.
     */
    data: XOR<GroceryListCreateInput, GroceryListUncheckedCreateInput>
  }

  /**
   * GroceryList createMany
   */
  export type GroceryListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroceryLists.
     */
    data: GroceryListCreateManyInput | GroceryListCreateManyInput[]
  }

  /**
   * GroceryList update
   */
  export type GroceryListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroceryList
     */
    select?: GroceryListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroceryListInclude<ExtArgs> | null
    /**
     * The data needed to update a GroceryList.
     */
    data: XOR<GroceryListUpdateInput, GroceryListUncheckedUpdateInput>
    /**
     * Choose, which GroceryList to update.
     */
    where: GroceryListWhereUniqueInput
  }

  /**
   * GroceryList updateMany
   */
  export type GroceryListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroceryLists.
     */
    data: XOR<GroceryListUpdateManyMutationInput, GroceryListUncheckedUpdateManyInput>
    /**
     * Filter which GroceryLists to update
     */
    where?: GroceryListWhereInput
  }

  /**
   * GroceryList upsert
   */
  export type GroceryListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroceryList
     */
    select?: GroceryListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroceryListInclude<ExtArgs> | null
    /**
     * The filter to search for the GroceryList to update in case it exists.
     */
    where: GroceryListWhereUniqueInput
    /**
     * In case the GroceryList found by the `where` argument doesn't exist, create a new GroceryList with this data.
     */
    create: XOR<GroceryListCreateInput, GroceryListUncheckedCreateInput>
    /**
     * In case the GroceryList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroceryListUpdateInput, GroceryListUncheckedUpdateInput>
  }

  /**
   * GroceryList delete
   */
  export type GroceryListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroceryList
     */
    select?: GroceryListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroceryListInclude<ExtArgs> | null
    /**
     * Filter which GroceryList to delete.
     */
    where: GroceryListWhereUniqueInput
  }

  /**
   * GroceryList deleteMany
   */
  export type GroceryListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroceryLists to delete
     */
    where?: GroceryListWhereInput
  }

  /**
   * GroceryList findRaw
   */
  export type GroceryListFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * GroceryList aggregateRaw
   */
  export type GroceryListAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * GroceryList without action
   */
  export type GroceryListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroceryList
     */
    select?: GroceryListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroceryListInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    lastLogin: 'lastLogin',
    displayName: 'displayName',
    preferences: 'preferences'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ReceiptScalarFieldEnum: {
    id: 'id',
    uploadedAt: 'uploadedAt',
    purchaseDate: 'purchaseDate',
    imageUrl: 'imageUrl',
    originalRawText: 'originalRawText',
    totalAmount: 'totalAmount',
    currency: 'currency',
    nutritionSummary: 'nutritionSummary',
    aiFeedbackReceipt: 'aiFeedbackReceipt',
    status: 'status',
    userId: 'userId'
  };

  export type ReceiptScalarFieldEnum = (typeof ReceiptScalarFieldEnum)[keyof typeof ReceiptScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id: 'id',
    originalBillLabel: 'originalBillLabel',
    aiSuggestedName: 'aiSuggestedName',
    price: 'price',
    isFoodItem: 'isFoodItem',
    nutritionDetails: 'nutritionDetails',
    classification: 'classification',
    manualCorrection: 'manualCorrection',
    receiptId: 'receiptId'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const UserNutritionSummaryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    nutritionScore: 'nutritionScore',
    freshFoodsPercentage: 'freshFoodsPercentage',
    highSugarItemsPercentage: 'highSugarItemsPercentage',
    processedFoodPercentage: 'processedFoodPercentage',
    goodNutriScorePercentage: 'goodNutriScorePercentage',
    overallAiFeedback: 'overallAiFeedback',
    lastUpdated: 'lastUpdated'
  };

  export type UserNutritionSummaryScalarFieldEnum = (typeof UserNutritionSummaryScalarFieldEnum)[keyof typeof UserNutritionSummaryScalarFieldEnum]


  export const GroceryListScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    healthyItems: 'healthyItems',
    missingNutritionItems: 'missingNutritionItems',
    sinItems: 'sinItems',
    lastGenerated: 'lastGenerated'
  };

  export type GroceryListScalarFieldEnum = (typeof GroceryListScalarFieldEnum)[keyof typeof GroceryListScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeFilter<"User"> | Date | string
    displayName?: StringNullableFilter<"User"> | string | null
    preferences?: JsonNullableFilter<"User">
    receipts?: ReceiptListRelationFilter
    nutritionSummary?: XOR<UserNutritionSummaryNullableRelationFilter, UserNutritionSummaryWhereInput> | null
    groceryList?: XOR<GroceryListNullableRelationFilter, GroceryListWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    lastLogin?: SortOrder
    displayName?: SortOrder
    preferences?: SortOrder
    receipts?: ReceiptOrderByRelationAggregateInput
    nutritionSummary?: UserNutritionSummaryOrderByWithRelationInput
    groceryList?: GroceryListOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeFilter<"User"> | Date | string
    displayName?: StringNullableFilter<"User"> | string | null
    preferences?: JsonNullableFilter<"User">
    receipts?: ReceiptListRelationFilter
    nutritionSummary?: XOR<UserNutritionSummaryNullableRelationFilter, UserNutritionSummaryWhereInput> | null
    groceryList?: XOR<GroceryListNullableRelationFilter, GroceryListWhereInput> | null
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    lastLogin?: SortOrder
    displayName?: SortOrder
    preferences?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLogin?: DateTimeWithAggregatesFilter<"User"> | Date | string
    displayName?: StringNullableWithAggregatesFilter<"User"> | string | null
    preferences?: JsonNullableWithAggregatesFilter<"User">
  }

  export type ReceiptWhereInput = {
    AND?: ReceiptWhereInput | ReceiptWhereInput[]
    OR?: ReceiptWhereInput[]
    NOT?: ReceiptWhereInput | ReceiptWhereInput[]
    id?: StringFilter<"Receipt"> | string
    uploadedAt?: DateTimeFilter<"Receipt"> | Date | string
    purchaseDate?: DateTimeFilter<"Receipt"> | Date | string
    imageUrl?: StringFilter<"Receipt"> | string
    originalRawText?: StringFilter<"Receipt"> | string
    totalAmount?: FloatFilter<"Receipt"> | number
    currency?: StringFilter<"Receipt"> | string
    nutritionSummary?: JsonNullableFilter<"Receipt">
    aiFeedbackReceipt?: StringNullableFilter<"Receipt"> | string | null
    status?: StringFilter<"Receipt"> | string
    userId?: StringFilter<"Receipt"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    items?: ItemListRelationFilter
  }

  export type ReceiptOrderByWithRelationInput = {
    id?: SortOrder
    uploadedAt?: SortOrder
    purchaseDate?: SortOrder
    imageUrl?: SortOrder
    originalRawText?: SortOrder
    totalAmount?: SortOrder
    currency?: SortOrder
    nutritionSummary?: SortOrder
    aiFeedbackReceipt?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    items?: ItemOrderByRelationAggregateInput
  }

  export type ReceiptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReceiptWhereInput | ReceiptWhereInput[]
    OR?: ReceiptWhereInput[]
    NOT?: ReceiptWhereInput | ReceiptWhereInput[]
    uploadedAt?: DateTimeFilter<"Receipt"> | Date | string
    purchaseDate?: DateTimeFilter<"Receipt"> | Date | string
    imageUrl?: StringFilter<"Receipt"> | string
    originalRawText?: StringFilter<"Receipt"> | string
    totalAmount?: FloatFilter<"Receipt"> | number
    currency?: StringFilter<"Receipt"> | string
    nutritionSummary?: JsonNullableFilter<"Receipt">
    aiFeedbackReceipt?: StringNullableFilter<"Receipt"> | string | null
    status?: StringFilter<"Receipt"> | string
    userId?: StringFilter<"Receipt"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    items?: ItemListRelationFilter
  }, "id">

  export type ReceiptOrderByWithAggregationInput = {
    id?: SortOrder
    uploadedAt?: SortOrder
    purchaseDate?: SortOrder
    imageUrl?: SortOrder
    originalRawText?: SortOrder
    totalAmount?: SortOrder
    currency?: SortOrder
    nutritionSummary?: SortOrder
    aiFeedbackReceipt?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    _count?: ReceiptCountOrderByAggregateInput
    _avg?: ReceiptAvgOrderByAggregateInput
    _max?: ReceiptMaxOrderByAggregateInput
    _min?: ReceiptMinOrderByAggregateInput
    _sum?: ReceiptSumOrderByAggregateInput
  }

  export type ReceiptScalarWhereWithAggregatesInput = {
    AND?: ReceiptScalarWhereWithAggregatesInput | ReceiptScalarWhereWithAggregatesInput[]
    OR?: ReceiptScalarWhereWithAggregatesInput[]
    NOT?: ReceiptScalarWhereWithAggregatesInput | ReceiptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Receipt"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"Receipt"> | Date | string
    purchaseDate?: DateTimeWithAggregatesFilter<"Receipt"> | Date | string
    imageUrl?: StringWithAggregatesFilter<"Receipt"> | string
    originalRawText?: StringWithAggregatesFilter<"Receipt"> | string
    totalAmount?: FloatWithAggregatesFilter<"Receipt"> | number
    currency?: StringWithAggregatesFilter<"Receipt"> | string
    nutritionSummary?: JsonNullableWithAggregatesFilter<"Receipt">
    aiFeedbackReceipt?: StringNullableWithAggregatesFilter<"Receipt"> | string | null
    status?: StringWithAggregatesFilter<"Receipt"> | string
    userId?: StringWithAggregatesFilter<"Receipt"> | string
  }

  export type ItemWhereInput = {
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    id?: StringFilter<"Item"> | string
    originalBillLabel?: StringFilter<"Item"> | string
    aiSuggestedName?: StringFilter<"Item"> | string
    price?: FloatFilter<"Item"> | number
    isFoodItem?: BoolFilter<"Item"> | boolean
    nutritionDetails?: JsonNullableFilter<"Item">
    classification?: StringNullableFilter<"Item"> | string | null
    manualCorrection?: BoolFilter<"Item"> | boolean
    receiptId?: StringFilter<"Item"> | string
    receipt?: XOR<ReceiptRelationFilter, ReceiptWhereInput>
  }

  export type ItemOrderByWithRelationInput = {
    id?: SortOrder
    originalBillLabel?: SortOrder
    aiSuggestedName?: SortOrder
    price?: SortOrder
    isFoodItem?: SortOrder
    nutritionDetails?: SortOrder
    classification?: SortOrder
    manualCorrection?: SortOrder
    receiptId?: SortOrder
    receipt?: ReceiptOrderByWithRelationInput
  }

  export type ItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    originalBillLabel?: StringFilter<"Item"> | string
    aiSuggestedName?: StringFilter<"Item"> | string
    price?: FloatFilter<"Item"> | number
    isFoodItem?: BoolFilter<"Item"> | boolean
    nutritionDetails?: JsonNullableFilter<"Item">
    classification?: StringNullableFilter<"Item"> | string | null
    manualCorrection?: BoolFilter<"Item"> | boolean
    receiptId?: StringFilter<"Item"> | string
    receipt?: XOR<ReceiptRelationFilter, ReceiptWhereInput>
  }, "id">

  export type ItemOrderByWithAggregationInput = {
    id?: SortOrder
    originalBillLabel?: SortOrder
    aiSuggestedName?: SortOrder
    price?: SortOrder
    isFoodItem?: SortOrder
    nutritionDetails?: SortOrder
    classification?: SortOrder
    manualCorrection?: SortOrder
    receiptId?: SortOrder
    _count?: ItemCountOrderByAggregateInput
    _avg?: ItemAvgOrderByAggregateInput
    _max?: ItemMaxOrderByAggregateInput
    _min?: ItemMinOrderByAggregateInput
    _sum?: ItemSumOrderByAggregateInput
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    OR?: ItemScalarWhereWithAggregatesInput[]
    NOT?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Item"> | string
    originalBillLabel?: StringWithAggregatesFilter<"Item"> | string
    aiSuggestedName?: StringWithAggregatesFilter<"Item"> | string
    price?: FloatWithAggregatesFilter<"Item"> | number
    isFoodItem?: BoolWithAggregatesFilter<"Item"> | boolean
    nutritionDetails?: JsonNullableWithAggregatesFilter<"Item">
    classification?: StringNullableWithAggregatesFilter<"Item"> | string | null
    manualCorrection?: BoolWithAggregatesFilter<"Item"> | boolean
    receiptId?: StringWithAggregatesFilter<"Item"> | string
  }

  export type UserNutritionSummaryWhereInput = {
    AND?: UserNutritionSummaryWhereInput | UserNutritionSummaryWhereInput[]
    OR?: UserNutritionSummaryWhereInput[]
    NOT?: UserNutritionSummaryWhereInput | UserNutritionSummaryWhereInput[]
    id?: StringFilter<"UserNutritionSummary"> | string
    userId?: StringFilter<"UserNutritionSummary"> | string
    nutritionScore?: FloatFilter<"UserNutritionSummary"> | number
    freshFoodsPercentage?: FloatFilter<"UserNutritionSummary"> | number
    highSugarItemsPercentage?: FloatFilter<"UserNutritionSummary"> | number
    processedFoodPercentage?: FloatFilter<"UserNutritionSummary"> | number
    goodNutriScorePercentage?: FloatFilter<"UserNutritionSummary"> | number
    overallAiFeedback?: StringNullableFilter<"UserNutritionSummary"> | string | null
    lastUpdated?: DateTimeFilter<"UserNutritionSummary"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserNutritionSummaryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    nutritionScore?: SortOrder
    freshFoodsPercentage?: SortOrder
    highSugarItemsPercentage?: SortOrder
    processedFoodPercentage?: SortOrder
    goodNutriScorePercentage?: SortOrder
    overallAiFeedback?: SortOrder
    lastUpdated?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserNutritionSummaryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserNutritionSummaryWhereInput | UserNutritionSummaryWhereInput[]
    OR?: UserNutritionSummaryWhereInput[]
    NOT?: UserNutritionSummaryWhereInput | UserNutritionSummaryWhereInput[]
    nutritionScore?: FloatFilter<"UserNutritionSummary"> | number
    freshFoodsPercentage?: FloatFilter<"UserNutritionSummary"> | number
    highSugarItemsPercentage?: FloatFilter<"UserNutritionSummary"> | number
    processedFoodPercentage?: FloatFilter<"UserNutritionSummary"> | number
    goodNutriScorePercentage?: FloatFilter<"UserNutritionSummary"> | number
    overallAiFeedback?: StringNullableFilter<"UserNutritionSummary"> | string | null
    lastUpdated?: DateTimeFilter<"UserNutritionSummary"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserNutritionSummaryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    nutritionScore?: SortOrder
    freshFoodsPercentage?: SortOrder
    highSugarItemsPercentage?: SortOrder
    processedFoodPercentage?: SortOrder
    goodNutriScorePercentage?: SortOrder
    overallAiFeedback?: SortOrder
    lastUpdated?: SortOrder
    _count?: UserNutritionSummaryCountOrderByAggregateInput
    _avg?: UserNutritionSummaryAvgOrderByAggregateInput
    _max?: UserNutritionSummaryMaxOrderByAggregateInput
    _min?: UserNutritionSummaryMinOrderByAggregateInput
    _sum?: UserNutritionSummarySumOrderByAggregateInput
  }

  export type UserNutritionSummaryScalarWhereWithAggregatesInput = {
    AND?: UserNutritionSummaryScalarWhereWithAggregatesInput | UserNutritionSummaryScalarWhereWithAggregatesInput[]
    OR?: UserNutritionSummaryScalarWhereWithAggregatesInput[]
    NOT?: UserNutritionSummaryScalarWhereWithAggregatesInput | UserNutritionSummaryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserNutritionSummary"> | string
    userId?: StringWithAggregatesFilter<"UserNutritionSummary"> | string
    nutritionScore?: FloatWithAggregatesFilter<"UserNutritionSummary"> | number
    freshFoodsPercentage?: FloatWithAggregatesFilter<"UserNutritionSummary"> | number
    highSugarItemsPercentage?: FloatWithAggregatesFilter<"UserNutritionSummary"> | number
    processedFoodPercentage?: FloatWithAggregatesFilter<"UserNutritionSummary"> | number
    goodNutriScorePercentage?: FloatWithAggregatesFilter<"UserNutritionSummary"> | number
    overallAiFeedback?: StringNullableWithAggregatesFilter<"UserNutritionSummary"> | string | null
    lastUpdated?: DateTimeWithAggregatesFilter<"UserNutritionSummary"> | Date | string
  }

  export type GroceryListWhereInput = {
    AND?: GroceryListWhereInput | GroceryListWhereInput[]
    OR?: GroceryListWhereInput[]
    NOT?: GroceryListWhereInput | GroceryListWhereInput[]
    id?: StringFilter<"GroceryList"> | string
    userId?: StringFilter<"GroceryList"> | string
    healthyItems?: StringNullableListFilter<"GroceryList">
    missingNutritionItems?: StringNullableListFilter<"GroceryList">
    sinItems?: StringNullableListFilter<"GroceryList">
    lastGenerated?: DateTimeFilter<"GroceryList"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GroceryListOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    healthyItems?: SortOrder
    missingNutritionItems?: SortOrder
    sinItems?: SortOrder
    lastGenerated?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type GroceryListWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: GroceryListWhereInput | GroceryListWhereInput[]
    OR?: GroceryListWhereInput[]
    NOT?: GroceryListWhereInput | GroceryListWhereInput[]
    healthyItems?: StringNullableListFilter<"GroceryList">
    missingNutritionItems?: StringNullableListFilter<"GroceryList">
    sinItems?: StringNullableListFilter<"GroceryList">
    lastGenerated?: DateTimeFilter<"GroceryList"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type GroceryListOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    healthyItems?: SortOrder
    missingNutritionItems?: SortOrder
    sinItems?: SortOrder
    lastGenerated?: SortOrder
    _count?: GroceryListCountOrderByAggregateInput
    _max?: GroceryListMaxOrderByAggregateInput
    _min?: GroceryListMinOrderByAggregateInput
  }

  export type GroceryListScalarWhereWithAggregatesInput = {
    AND?: GroceryListScalarWhereWithAggregatesInput | GroceryListScalarWhereWithAggregatesInput[]
    OR?: GroceryListScalarWhereWithAggregatesInput[]
    NOT?: GroceryListScalarWhereWithAggregatesInput | GroceryListScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GroceryList"> | string
    userId?: StringWithAggregatesFilter<"GroceryList"> | string
    healthyItems?: StringNullableListFilter<"GroceryList">
    missingNutritionItems?: StringNullableListFilter<"GroceryList">
    sinItems?: StringNullableListFilter<"GroceryList">
    lastGenerated?: DateTimeWithAggregatesFilter<"GroceryList"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    createdAt?: Date | string
    lastLogin?: Date | string
    displayName?: string | null
    preferences?: InputJsonValue | null
    receipts?: ReceiptCreateNestedManyWithoutUserInput
    nutritionSummary?: UserNutritionSummaryCreateNestedOneWithoutUserInput
    groceryList?: GroceryListCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    lastLogin?: Date | string
    displayName?: string | null
    preferences?: InputJsonValue | null
    receipts?: ReceiptUncheckedCreateNestedManyWithoutUserInput
    nutritionSummary?: UserNutritionSummaryUncheckedCreateNestedOneWithoutUserInput
    groceryList?: GroceryListUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: InputJsonValue | InputJsonValue | null
    receipts?: ReceiptUpdateManyWithoutUserNestedInput
    nutritionSummary?: UserNutritionSummaryUpdateOneWithoutUserNestedInput
    groceryList?: GroceryListUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: InputJsonValue | InputJsonValue | null
    receipts?: ReceiptUncheckedUpdateManyWithoutUserNestedInput
    nutritionSummary?: UserNutritionSummaryUncheckedUpdateOneWithoutUserNestedInput
    groceryList?: GroceryListUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    createdAt?: Date | string
    lastLogin?: Date | string
    displayName?: string | null
    preferences?: InputJsonValue | null
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: InputJsonValue | InputJsonValue | null
  }

  export type UserUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: InputJsonValue | InputJsonValue | null
  }

  export type ReceiptCreateInput = {
    id?: string
    uploadedAt?: Date | string
    purchaseDate: Date | string
    imageUrl: string
    originalRawText: string
    totalAmount: number
    currency: string
    nutritionSummary?: InputJsonValue | null
    aiFeedbackReceipt?: string | null
    status: string
    user: UserCreateNestedOneWithoutReceiptsInput
    items?: ItemCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateInput = {
    id?: string
    uploadedAt?: Date | string
    purchaseDate: Date | string
    imageUrl: string
    originalRawText: string
    totalAmount: number
    currency: string
    nutritionSummary?: InputJsonValue | null
    aiFeedbackReceipt?: string | null
    status: string
    userId: string
    items?: ItemUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUpdateInput = {
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    originalRawText?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    nutritionSummary?: InputJsonValue | InputJsonValue | null
    aiFeedbackReceipt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutReceiptsNestedInput
    items?: ItemUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateInput = {
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    originalRawText?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    nutritionSummary?: InputJsonValue | InputJsonValue | null
    aiFeedbackReceipt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    items?: ItemUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptCreateManyInput = {
    id?: string
    uploadedAt?: Date | string
    purchaseDate: Date | string
    imageUrl: string
    originalRawText: string
    totalAmount: number
    currency: string
    nutritionSummary?: InputJsonValue | null
    aiFeedbackReceipt?: string | null
    status: string
    userId: string
  }

  export type ReceiptUpdateManyMutationInput = {
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    originalRawText?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    nutritionSummary?: InputJsonValue | InputJsonValue | null
    aiFeedbackReceipt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ReceiptUncheckedUpdateManyInput = {
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    originalRawText?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    nutritionSummary?: InputJsonValue | InputJsonValue | null
    aiFeedbackReceipt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ItemCreateInput = {
    id?: string
    originalBillLabel: string
    aiSuggestedName: string
    price: number
    isFoodItem: boolean
    nutritionDetails?: InputJsonValue | null
    classification?: string | null
    manualCorrection?: boolean
    receipt: ReceiptCreateNestedOneWithoutItemsInput
  }

  export type ItemUncheckedCreateInput = {
    id?: string
    originalBillLabel: string
    aiSuggestedName: string
    price: number
    isFoodItem: boolean
    nutritionDetails?: InputJsonValue | null
    classification?: string | null
    manualCorrection?: boolean
    receiptId: string
  }

  export type ItemUpdateInput = {
    originalBillLabel?: StringFieldUpdateOperationsInput | string
    aiSuggestedName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isFoodItem?: BoolFieldUpdateOperationsInput | boolean
    nutritionDetails?: InputJsonValue | InputJsonValue | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    manualCorrection?: BoolFieldUpdateOperationsInput | boolean
    receipt?: ReceiptUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ItemUncheckedUpdateInput = {
    originalBillLabel?: StringFieldUpdateOperationsInput | string
    aiSuggestedName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isFoodItem?: BoolFieldUpdateOperationsInput | boolean
    nutritionDetails?: InputJsonValue | InputJsonValue | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    manualCorrection?: BoolFieldUpdateOperationsInput | boolean
    receiptId?: StringFieldUpdateOperationsInput | string
  }

  export type ItemCreateManyInput = {
    id?: string
    originalBillLabel: string
    aiSuggestedName: string
    price: number
    isFoodItem: boolean
    nutritionDetails?: InputJsonValue | null
    classification?: string | null
    manualCorrection?: boolean
    receiptId: string
  }

  export type ItemUpdateManyMutationInput = {
    originalBillLabel?: StringFieldUpdateOperationsInput | string
    aiSuggestedName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isFoodItem?: BoolFieldUpdateOperationsInput | boolean
    nutritionDetails?: InputJsonValue | InputJsonValue | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    manualCorrection?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ItemUncheckedUpdateManyInput = {
    originalBillLabel?: StringFieldUpdateOperationsInput | string
    aiSuggestedName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isFoodItem?: BoolFieldUpdateOperationsInput | boolean
    nutritionDetails?: InputJsonValue | InputJsonValue | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    manualCorrection?: BoolFieldUpdateOperationsInput | boolean
    receiptId?: StringFieldUpdateOperationsInput | string
  }

  export type UserNutritionSummaryCreateInput = {
    id?: string
    nutritionScore?: number
    freshFoodsPercentage?: number
    highSugarItemsPercentage?: number
    processedFoodPercentage?: number
    goodNutriScorePercentage?: number
    overallAiFeedback?: string | null
    lastUpdated?: Date | string
    user: UserCreateNestedOneWithoutNutritionSummaryInput
  }

  export type UserNutritionSummaryUncheckedCreateInput = {
    id?: string
    userId: string
    nutritionScore?: number
    freshFoodsPercentage?: number
    highSugarItemsPercentage?: number
    processedFoodPercentage?: number
    goodNutriScorePercentage?: number
    overallAiFeedback?: string | null
    lastUpdated?: Date | string
  }

  export type UserNutritionSummaryUpdateInput = {
    nutritionScore?: FloatFieldUpdateOperationsInput | number
    freshFoodsPercentage?: FloatFieldUpdateOperationsInput | number
    highSugarItemsPercentage?: FloatFieldUpdateOperationsInput | number
    processedFoodPercentage?: FloatFieldUpdateOperationsInput | number
    goodNutriScorePercentage?: FloatFieldUpdateOperationsInput | number
    overallAiFeedback?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNutritionSummaryNestedInput
  }

  export type UserNutritionSummaryUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    nutritionScore?: FloatFieldUpdateOperationsInput | number
    freshFoodsPercentage?: FloatFieldUpdateOperationsInput | number
    highSugarItemsPercentage?: FloatFieldUpdateOperationsInput | number
    processedFoodPercentage?: FloatFieldUpdateOperationsInput | number
    goodNutriScorePercentage?: FloatFieldUpdateOperationsInput | number
    overallAiFeedback?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNutritionSummaryCreateManyInput = {
    id?: string
    userId: string
    nutritionScore?: number
    freshFoodsPercentage?: number
    highSugarItemsPercentage?: number
    processedFoodPercentage?: number
    goodNutriScorePercentage?: number
    overallAiFeedback?: string | null
    lastUpdated?: Date | string
  }

  export type UserNutritionSummaryUpdateManyMutationInput = {
    nutritionScore?: FloatFieldUpdateOperationsInput | number
    freshFoodsPercentage?: FloatFieldUpdateOperationsInput | number
    highSugarItemsPercentage?: FloatFieldUpdateOperationsInput | number
    processedFoodPercentage?: FloatFieldUpdateOperationsInput | number
    goodNutriScorePercentage?: FloatFieldUpdateOperationsInput | number
    overallAiFeedback?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNutritionSummaryUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    nutritionScore?: FloatFieldUpdateOperationsInput | number
    freshFoodsPercentage?: FloatFieldUpdateOperationsInput | number
    highSugarItemsPercentage?: FloatFieldUpdateOperationsInput | number
    processedFoodPercentage?: FloatFieldUpdateOperationsInput | number
    goodNutriScorePercentage?: FloatFieldUpdateOperationsInput | number
    overallAiFeedback?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroceryListCreateInput = {
    id?: string
    healthyItems?: GroceryListCreatehealthyItemsInput | string[]
    missingNutritionItems?: GroceryListCreatemissingNutritionItemsInput | string[]
    sinItems?: GroceryListCreatesinItemsInput | string[]
    lastGenerated?: Date | string
    user: UserCreateNestedOneWithoutGroceryListInput
  }

  export type GroceryListUncheckedCreateInput = {
    id?: string
    userId: string
    healthyItems?: GroceryListCreatehealthyItemsInput | string[]
    missingNutritionItems?: GroceryListCreatemissingNutritionItemsInput | string[]
    sinItems?: GroceryListCreatesinItemsInput | string[]
    lastGenerated?: Date | string
  }

  export type GroceryListUpdateInput = {
    healthyItems?: GroceryListUpdatehealthyItemsInput | string[]
    missingNutritionItems?: GroceryListUpdatemissingNutritionItemsInput | string[]
    sinItems?: GroceryListUpdatesinItemsInput | string[]
    lastGenerated?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGroceryListNestedInput
  }

  export type GroceryListUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    healthyItems?: GroceryListUpdatehealthyItemsInput | string[]
    missingNutritionItems?: GroceryListUpdatemissingNutritionItemsInput | string[]
    sinItems?: GroceryListUpdatesinItemsInput | string[]
    lastGenerated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroceryListCreateManyInput = {
    id?: string
    userId: string
    healthyItems?: GroceryListCreatehealthyItemsInput | string[]
    missingNutritionItems?: GroceryListCreatemissingNutritionItemsInput | string[]
    sinItems?: GroceryListCreatesinItemsInput | string[]
    lastGenerated?: Date | string
  }

  export type GroceryListUpdateManyMutationInput = {
    healthyItems?: GroceryListUpdatehealthyItemsInput | string[]
    missingNutritionItems?: GroceryListUpdatemissingNutritionItemsInput | string[]
    sinItems?: GroceryListUpdatesinItemsInput | string[]
    lastGenerated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroceryListUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    healthyItems?: GroceryListUpdatehealthyItemsInput | string[]
    missingNutritionItems?: GroceryListUpdatemissingNutritionItemsInput | string[]
    sinItems?: GroceryListUpdatesinItemsInput | string[]
    lastGenerated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type ReceiptListRelationFilter = {
    every?: ReceiptWhereInput
    some?: ReceiptWhereInput
    none?: ReceiptWhereInput
  }

  export type UserNutritionSummaryNullableRelationFilter = {
    is?: UserNutritionSummaryWhereInput | null
    isNot?: UserNutritionSummaryWhereInput | null
  }

  export type GroceryListNullableRelationFilter = {
    is?: GroceryListWhereInput | null
    isNot?: GroceryListWhereInput | null
  }

  export type ReceiptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    lastLogin?: SortOrder
    displayName?: SortOrder
    preferences?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    lastLogin?: SortOrder
    displayName?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    lastLogin?: SortOrder
    displayName?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ItemListRelationFilter = {
    every?: ItemWhereInput
    some?: ItemWhereInput
    none?: ItemWhereInput
  }

  export type ItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReceiptCountOrderByAggregateInput = {
    id?: SortOrder
    uploadedAt?: SortOrder
    purchaseDate?: SortOrder
    imageUrl?: SortOrder
    originalRawText?: SortOrder
    totalAmount?: SortOrder
    currency?: SortOrder
    nutritionSummary?: SortOrder
    aiFeedbackReceipt?: SortOrder
    status?: SortOrder
    userId?: SortOrder
  }

  export type ReceiptAvgOrderByAggregateInput = {
    totalAmount?: SortOrder
  }

  export type ReceiptMaxOrderByAggregateInput = {
    id?: SortOrder
    uploadedAt?: SortOrder
    purchaseDate?: SortOrder
    imageUrl?: SortOrder
    originalRawText?: SortOrder
    totalAmount?: SortOrder
    currency?: SortOrder
    aiFeedbackReceipt?: SortOrder
    status?: SortOrder
    userId?: SortOrder
  }

  export type ReceiptMinOrderByAggregateInput = {
    id?: SortOrder
    uploadedAt?: SortOrder
    purchaseDate?: SortOrder
    imageUrl?: SortOrder
    originalRawText?: SortOrder
    totalAmount?: SortOrder
    currency?: SortOrder
    aiFeedbackReceipt?: SortOrder
    status?: SortOrder
    userId?: SortOrder
  }

  export type ReceiptSumOrderByAggregateInput = {
    totalAmount?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ReceiptRelationFilter = {
    is?: ReceiptWhereInput
    isNot?: ReceiptWhereInput
  }

  export type ItemCountOrderByAggregateInput = {
    id?: SortOrder
    originalBillLabel?: SortOrder
    aiSuggestedName?: SortOrder
    price?: SortOrder
    isFoodItem?: SortOrder
    nutritionDetails?: SortOrder
    classification?: SortOrder
    manualCorrection?: SortOrder
    receiptId?: SortOrder
  }

  export type ItemAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type ItemMaxOrderByAggregateInput = {
    id?: SortOrder
    originalBillLabel?: SortOrder
    aiSuggestedName?: SortOrder
    price?: SortOrder
    isFoodItem?: SortOrder
    classification?: SortOrder
    manualCorrection?: SortOrder
    receiptId?: SortOrder
  }

  export type ItemMinOrderByAggregateInput = {
    id?: SortOrder
    originalBillLabel?: SortOrder
    aiSuggestedName?: SortOrder
    price?: SortOrder
    isFoodItem?: SortOrder
    classification?: SortOrder
    manualCorrection?: SortOrder
    receiptId?: SortOrder
  }

  export type ItemSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserNutritionSummaryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nutritionScore?: SortOrder
    freshFoodsPercentage?: SortOrder
    highSugarItemsPercentage?: SortOrder
    processedFoodPercentage?: SortOrder
    goodNutriScorePercentage?: SortOrder
    overallAiFeedback?: SortOrder
    lastUpdated?: SortOrder
  }

  export type UserNutritionSummaryAvgOrderByAggregateInput = {
    nutritionScore?: SortOrder
    freshFoodsPercentage?: SortOrder
    highSugarItemsPercentage?: SortOrder
    processedFoodPercentage?: SortOrder
    goodNutriScorePercentage?: SortOrder
  }

  export type UserNutritionSummaryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nutritionScore?: SortOrder
    freshFoodsPercentage?: SortOrder
    highSugarItemsPercentage?: SortOrder
    processedFoodPercentage?: SortOrder
    goodNutriScorePercentage?: SortOrder
    overallAiFeedback?: SortOrder
    lastUpdated?: SortOrder
  }

  export type UserNutritionSummaryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nutritionScore?: SortOrder
    freshFoodsPercentage?: SortOrder
    highSugarItemsPercentage?: SortOrder
    processedFoodPercentage?: SortOrder
    goodNutriScorePercentage?: SortOrder
    overallAiFeedback?: SortOrder
    lastUpdated?: SortOrder
  }

  export type UserNutritionSummarySumOrderByAggregateInput = {
    nutritionScore?: SortOrder
    freshFoodsPercentage?: SortOrder
    highSugarItemsPercentage?: SortOrder
    processedFoodPercentage?: SortOrder
    goodNutriScorePercentage?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type GroceryListCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    healthyItems?: SortOrder
    missingNutritionItems?: SortOrder
    sinItems?: SortOrder
    lastGenerated?: SortOrder
  }

  export type GroceryListMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    lastGenerated?: SortOrder
  }

  export type GroceryListMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    lastGenerated?: SortOrder
  }

  export type ReceiptCreateNestedManyWithoutUserInput = {
    create?: XOR<ReceiptCreateWithoutUserInput, ReceiptUncheckedCreateWithoutUserInput> | ReceiptCreateWithoutUserInput[] | ReceiptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutUserInput | ReceiptCreateOrConnectWithoutUserInput[]
    createMany?: ReceiptCreateManyUserInputEnvelope
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
  }

  export type UserNutritionSummaryCreateNestedOneWithoutUserInput = {
    create?: XOR<UserNutritionSummaryCreateWithoutUserInput, UserNutritionSummaryUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserNutritionSummaryCreateOrConnectWithoutUserInput
    connect?: UserNutritionSummaryWhereUniqueInput
  }

  export type GroceryListCreateNestedOneWithoutUserInput = {
    create?: XOR<GroceryListCreateWithoutUserInput, GroceryListUncheckedCreateWithoutUserInput>
    connectOrCreate?: GroceryListCreateOrConnectWithoutUserInput
    connect?: GroceryListWhereUniqueInput
  }

  export type ReceiptUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReceiptCreateWithoutUserInput, ReceiptUncheckedCreateWithoutUserInput> | ReceiptCreateWithoutUserInput[] | ReceiptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutUserInput | ReceiptCreateOrConnectWithoutUserInput[]
    createMany?: ReceiptCreateManyUserInputEnvelope
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
  }

  export type UserNutritionSummaryUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserNutritionSummaryCreateWithoutUserInput, UserNutritionSummaryUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserNutritionSummaryCreateOrConnectWithoutUserInput
    connect?: UserNutritionSummaryWhereUniqueInput
  }

  export type GroceryListUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<GroceryListCreateWithoutUserInput, GroceryListUncheckedCreateWithoutUserInput>
    connectOrCreate?: GroceryListCreateOrConnectWithoutUserInput
    connect?: GroceryListWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type ReceiptUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReceiptCreateWithoutUserInput, ReceiptUncheckedCreateWithoutUserInput> | ReceiptCreateWithoutUserInput[] | ReceiptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutUserInput | ReceiptCreateOrConnectWithoutUserInput[]
    upsert?: ReceiptUpsertWithWhereUniqueWithoutUserInput | ReceiptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReceiptCreateManyUserInputEnvelope
    set?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    disconnect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    delete?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    update?: ReceiptUpdateWithWhereUniqueWithoutUserInput | ReceiptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReceiptUpdateManyWithWhereWithoutUserInput | ReceiptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
  }

  export type UserNutritionSummaryUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserNutritionSummaryCreateWithoutUserInput, UserNutritionSummaryUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserNutritionSummaryCreateOrConnectWithoutUserInput
    upsert?: UserNutritionSummaryUpsertWithoutUserInput
    disconnect?: UserNutritionSummaryWhereInput | boolean
    delete?: UserNutritionSummaryWhereInput | boolean
    connect?: UserNutritionSummaryWhereUniqueInput
    update?: XOR<XOR<UserNutritionSummaryUpdateToOneWithWhereWithoutUserInput, UserNutritionSummaryUpdateWithoutUserInput>, UserNutritionSummaryUncheckedUpdateWithoutUserInput>
  }

  export type GroceryListUpdateOneWithoutUserNestedInput = {
    create?: XOR<GroceryListCreateWithoutUserInput, GroceryListUncheckedCreateWithoutUserInput>
    connectOrCreate?: GroceryListCreateOrConnectWithoutUserInput
    upsert?: GroceryListUpsertWithoutUserInput
    disconnect?: GroceryListWhereInput | boolean
    delete?: GroceryListWhereInput | boolean
    connect?: GroceryListWhereUniqueInput
    update?: XOR<XOR<GroceryListUpdateToOneWithWhereWithoutUserInput, GroceryListUpdateWithoutUserInput>, GroceryListUncheckedUpdateWithoutUserInput>
  }

  export type ReceiptUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReceiptCreateWithoutUserInput, ReceiptUncheckedCreateWithoutUserInput> | ReceiptCreateWithoutUserInput[] | ReceiptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReceiptCreateOrConnectWithoutUserInput | ReceiptCreateOrConnectWithoutUserInput[]
    upsert?: ReceiptUpsertWithWhereUniqueWithoutUserInput | ReceiptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReceiptCreateManyUserInputEnvelope
    set?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    disconnect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    delete?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    connect?: ReceiptWhereUniqueInput | ReceiptWhereUniqueInput[]
    update?: ReceiptUpdateWithWhereUniqueWithoutUserInput | ReceiptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReceiptUpdateManyWithWhereWithoutUserInput | ReceiptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
  }

  export type UserNutritionSummaryUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserNutritionSummaryCreateWithoutUserInput, UserNutritionSummaryUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserNutritionSummaryCreateOrConnectWithoutUserInput
    upsert?: UserNutritionSummaryUpsertWithoutUserInput
    disconnect?: UserNutritionSummaryWhereInput | boolean
    delete?: UserNutritionSummaryWhereInput | boolean
    connect?: UserNutritionSummaryWhereUniqueInput
    update?: XOR<XOR<UserNutritionSummaryUpdateToOneWithWhereWithoutUserInput, UserNutritionSummaryUpdateWithoutUserInput>, UserNutritionSummaryUncheckedUpdateWithoutUserInput>
  }

  export type GroceryListUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<GroceryListCreateWithoutUserInput, GroceryListUncheckedCreateWithoutUserInput>
    connectOrCreate?: GroceryListCreateOrConnectWithoutUserInput
    upsert?: GroceryListUpsertWithoutUserInput
    disconnect?: GroceryListWhereInput | boolean
    delete?: GroceryListWhereInput | boolean
    connect?: GroceryListWhereUniqueInput
    update?: XOR<XOR<GroceryListUpdateToOneWithWhereWithoutUserInput, GroceryListUpdateWithoutUserInput>, GroceryListUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutReceiptsInput = {
    create?: XOR<UserCreateWithoutReceiptsInput, UserUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceiptsInput
    connect?: UserWhereUniqueInput
  }

  export type ItemCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ItemCreateWithoutReceiptInput, ItemUncheckedCreateWithoutReceiptInput> | ItemCreateWithoutReceiptInput[] | ItemUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutReceiptInput | ItemCreateOrConnectWithoutReceiptInput[]
    createMany?: ItemCreateManyReceiptInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutReceiptInput = {
    create?: XOR<ItemCreateWithoutReceiptInput, ItemUncheckedCreateWithoutReceiptInput> | ItemCreateWithoutReceiptInput[] | ItemUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutReceiptInput | ItemCreateOrConnectWithoutReceiptInput[]
    createMany?: ItemCreateManyReceiptInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutReceiptsNestedInput = {
    create?: XOR<UserCreateWithoutReceiptsInput, UserUncheckedCreateWithoutReceiptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceiptsInput
    upsert?: UserUpsertWithoutReceiptsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceiptsInput, UserUpdateWithoutReceiptsInput>, UserUncheckedUpdateWithoutReceiptsInput>
  }

  export type ItemUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ItemCreateWithoutReceiptInput, ItemUncheckedCreateWithoutReceiptInput> | ItemCreateWithoutReceiptInput[] | ItemUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutReceiptInput | ItemCreateOrConnectWithoutReceiptInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutReceiptInput | ItemUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ItemCreateManyReceiptInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutReceiptInput | ItemUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutReceiptInput | ItemUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutReceiptNestedInput = {
    create?: XOR<ItemCreateWithoutReceiptInput, ItemUncheckedCreateWithoutReceiptInput> | ItemCreateWithoutReceiptInput[] | ItemUncheckedCreateWithoutReceiptInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutReceiptInput | ItemCreateOrConnectWithoutReceiptInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutReceiptInput | ItemUpsertWithWhereUniqueWithoutReceiptInput[]
    createMany?: ItemCreateManyReceiptInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutReceiptInput | ItemUpdateWithWhereUniqueWithoutReceiptInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutReceiptInput | ItemUpdateManyWithWhereWithoutReceiptInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type ReceiptCreateNestedOneWithoutItemsInput = {
    create?: XOR<ReceiptCreateWithoutItemsInput, ReceiptUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutItemsInput
    connect?: ReceiptWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ReceiptUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<ReceiptCreateWithoutItemsInput, ReceiptUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ReceiptCreateOrConnectWithoutItemsInput
    upsert?: ReceiptUpsertWithoutItemsInput
    connect?: ReceiptWhereUniqueInput
    update?: XOR<XOR<ReceiptUpdateToOneWithWhereWithoutItemsInput, ReceiptUpdateWithoutItemsInput>, ReceiptUncheckedUpdateWithoutItemsInput>
  }

  export type UserCreateNestedOneWithoutNutritionSummaryInput = {
    create?: XOR<UserCreateWithoutNutritionSummaryInput, UserUncheckedCreateWithoutNutritionSummaryInput>
    connectOrCreate?: UserCreateOrConnectWithoutNutritionSummaryInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNutritionSummaryNestedInput = {
    create?: XOR<UserCreateWithoutNutritionSummaryInput, UserUncheckedCreateWithoutNutritionSummaryInput>
    connectOrCreate?: UserCreateOrConnectWithoutNutritionSummaryInput
    upsert?: UserUpsertWithoutNutritionSummaryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNutritionSummaryInput, UserUpdateWithoutNutritionSummaryInput>, UserUncheckedUpdateWithoutNutritionSummaryInput>
  }

  export type GroceryListCreatehealthyItemsInput = {
    set: string[]
  }

  export type GroceryListCreatemissingNutritionItemsInput = {
    set: string[]
  }

  export type GroceryListCreatesinItemsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutGroceryListInput = {
    create?: XOR<UserCreateWithoutGroceryListInput, UserUncheckedCreateWithoutGroceryListInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroceryListInput
    connect?: UserWhereUniqueInput
  }

  export type GroceryListUpdatehealthyItemsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type GroceryListUpdatemissingNutritionItemsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type GroceryListUpdatesinItemsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutGroceryListNestedInput = {
    create?: XOR<UserCreateWithoutGroceryListInput, UserUncheckedCreateWithoutGroceryListInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroceryListInput
    upsert?: UserUpsertWithoutGroceryListInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGroceryListInput, UserUpdateWithoutGroceryListInput>, UserUncheckedUpdateWithoutGroceryListInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ReceiptCreateWithoutUserInput = {
    id?: string
    uploadedAt?: Date | string
    purchaseDate: Date | string
    imageUrl: string
    originalRawText: string
    totalAmount: number
    currency: string
    nutritionSummary?: InputJsonValue | null
    aiFeedbackReceipt?: string | null
    status: string
    items?: ItemCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptUncheckedCreateWithoutUserInput = {
    id?: string
    uploadedAt?: Date | string
    purchaseDate: Date | string
    imageUrl: string
    originalRawText: string
    totalAmount: number
    currency: string
    nutritionSummary?: InputJsonValue | null
    aiFeedbackReceipt?: string | null
    status: string
    items?: ItemUncheckedCreateNestedManyWithoutReceiptInput
  }

  export type ReceiptCreateOrConnectWithoutUserInput = {
    where: ReceiptWhereUniqueInput
    create: XOR<ReceiptCreateWithoutUserInput, ReceiptUncheckedCreateWithoutUserInput>
  }

  export type ReceiptCreateManyUserInputEnvelope = {
    data: ReceiptCreateManyUserInput | ReceiptCreateManyUserInput[]
  }

  export type UserNutritionSummaryCreateWithoutUserInput = {
    id?: string
    nutritionScore?: number
    freshFoodsPercentage?: number
    highSugarItemsPercentage?: number
    processedFoodPercentage?: number
    goodNutriScorePercentage?: number
    overallAiFeedback?: string | null
    lastUpdated?: Date | string
  }

  export type UserNutritionSummaryUncheckedCreateWithoutUserInput = {
    id?: string
    nutritionScore?: number
    freshFoodsPercentage?: number
    highSugarItemsPercentage?: number
    processedFoodPercentage?: number
    goodNutriScorePercentage?: number
    overallAiFeedback?: string | null
    lastUpdated?: Date | string
  }

  export type UserNutritionSummaryCreateOrConnectWithoutUserInput = {
    where: UserNutritionSummaryWhereUniqueInput
    create: XOR<UserNutritionSummaryCreateWithoutUserInput, UserNutritionSummaryUncheckedCreateWithoutUserInput>
  }

  export type GroceryListCreateWithoutUserInput = {
    id?: string
    healthyItems?: GroceryListCreatehealthyItemsInput | string[]
    missingNutritionItems?: GroceryListCreatemissingNutritionItemsInput | string[]
    sinItems?: GroceryListCreatesinItemsInput | string[]
    lastGenerated?: Date | string
  }

  export type GroceryListUncheckedCreateWithoutUserInput = {
    id?: string
    healthyItems?: GroceryListCreatehealthyItemsInput | string[]
    missingNutritionItems?: GroceryListCreatemissingNutritionItemsInput | string[]
    sinItems?: GroceryListCreatesinItemsInput | string[]
    lastGenerated?: Date | string
  }

  export type GroceryListCreateOrConnectWithoutUserInput = {
    where: GroceryListWhereUniqueInput
    create: XOR<GroceryListCreateWithoutUserInput, GroceryListUncheckedCreateWithoutUserInput>
  }

  export type ReceiptUpsertWithWhereUniqueWithoutUserInput = {
    where: ReceiptWhereUniqueInput
    update: XOR<ReceiptUpdateWithoutUserInput, ReceiptUncheckedUpdateWithoutUserInput>
    create: XOR<ReceiptCreateWithoutUserInput, ReceiptUncheckedCreateWithoutUserInput>
  }

  export type ReceiptUpdateWithWhereUniqueWithoutUserInput = {
    where: ReceiptWhereUniqueInput
    data: XOR<ReceiptUpdateWithoutUserInput, ReceiptUncheckedUpdateWithoutUserInput>
  }

  export type ReceiptUpdateManyWithWhereWithoutUserInput = {
    where: ReceiptScalarWhereInput
    data: XOR<ReceiptUpdateManyMutationInput, ReceiptUncheckedUpdateManyWithoutUserInput>
  }

  export type ReceiptScalarWhereInput = {
    AND?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
    OR?: ReceiptScalarWhereInput[]
    NOT?: ReceiptScalarWhereInput | ReceiptScalarWhereInput[]
    id?: StringFilter<"Receipt"> | string
    uploadedAt?: DateTimeFilter<"Receipt"> | Date | string
    purchaseDate?: DateTimeFilter<"Receipt"> | Date | string
    imageUrl?: StringFilter<"Receipt"> | string
    originalRawText?: StringFilter<"Receipt"> | string
    totalAmount?: FloatFilter<"Receipt"> | number
    currency?: StringFilter<"Receipt"> | string
    nutritionSummary?: JsonNullableFilter<"Receipt">
    aiFeedbackReceipt?: StringNullableFilter<"Receipt"> | string | null
    status?: StringFilter<"Receipt"> | string
    userId?: StringFilter<"Receipt"> | string
  }

  export type UserNutritionSummaryUpsertWithoutUserInput = {
    update: XOR<UserNutritionSummaryUpdateWithoutUserInput, UserNutritionSummaryUncheckedUpdateWithoutUserInput>
    create: XOR<UserNutritionSummaryCreateWithoutUserInput, UserNutritionSummaryUncheckedCreateWithoutUserInput>
    where?: UserNutritionSummaryWhereInput
  }

  export type UserNutritionSummaryUpdateToOneWithWhereWithoutUserInput = {
    where?: UserNutritionSummaryWhereInput
    data: XOR<UserNutritionSummaryUpdateWithoutUserInput, UserNutritionSummaryUncheckedUpdateWithoutUserInput>
  }

  export type UserNutritionSummaryUpdateWithoutUserInput = {
    nutritionScore?: FloatFieldUpdateOperationsInput | number
    freshFoodsPercentage?: FloatFieldUpdateOperationsInput | number
    highSugarItemsPercentage?: FloatFieldUpdateOperationsInput | number
    processedFoodPercentage?: FloatFieldUpdateOperationsInput | number
    goodNutriScorePercentage?: FloatFieldUpdateOperationsInput | number
    overallAiFeedback?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNutritionSummaryUncheckedUpdateWithoutUserInput = {
    nutritionScore?: FloatFieldUpdateOperationsInput | number
    freshFoodsPercentage?: FloatFieldUpdateOperationsInput | number
    highSugarItemsPercentage?: FloatFieldUpdateOperationsInput | number
    processedFoodPercentage?: FloatFieldUpdateOperationsInput | number
    goodNutriScorePercentage?: FloatFieldUpdateOperationsInput | number
    overallAiFeedback?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroceryListUpsertWithoutUserInput = {
    update: XOR<GroceryListUpdateWithoutUserInput, GroceryListUncheckedUpdateWithoutUserInput>
    create: XOR<GroceryListCreateWithoutUserInput, GroceryListUncheckedCreateWithoutUserInput>
    where?: GroceryListWhereInput
  }

  export type GroceryListUpdateToOneWithWhereWithoutUserInput = {
    where?: GroceryListWhereInput
    data: XOR<GroceryListUpdateWithoutUserInput, GroceryListUncheckedUpdateWithoutUserInput>
  }

  export type GroceryListUpdateWithoutUserInput = {
    healthyItems?: GroceryListUpdatehealthyItemsInput | string[]
    missingNutritionItems?: GroceryListUpdatemissingNutritionItemsInput | string[]
    sinItems?: GroceryListUpdatesinItemsInput | string[]
    lastGenerated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroceryListUncheckedUpdateWithoutUserInput = {
    healthyItems?: GroceryListUpdatehealthyItemsInput | string[]
    missingNutritionItems?: GroceryListUpdatemissingNutritionItemsInput | string[]
    sinItems?: GroceryListUpdatesinItemsInput | string[]
    lastGenerated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutReceiptsInput = {
    id?: string
    createdAt?: Date | string
    lastLogin?: Date | string
    displayName?: string | null
    preferences?: InputJsonValue | null
    nutritionSummary?: UserNutritionSummaryCreateNestedOneWithoutUserInput
    groceryList?: GroceryListCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceiptsInput = {
    id?: string
    createdAt?: Date | string
    lastLogin?: Date | string
    displayName?: string | null
    preferences?: InputJsonValue | null
    nutritionSummary?: UserNutritionSummaryUncheckedCreateNestedOneWithoutUserInput
    groceryList?: GroceryListUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceiptsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceiptsInput, UserUncheckedCreateWithoutReceiptsInput>
  }

  export type ItemCreateWithoutReceiptInput = {
    id?: string
    originalBillLabel: string
    aiSuggestedName: string
    price: number
    isFoodItem: boolean
    nutritionDetails?: InputJsonValue | null
    classification?: string | null
    manualCorrection?: boolean
  }

  export type ItemUncheckedCreateWithoutReceiptInput = {
    id?: string
    originalBillLabel: string
    aiSuggestedName: string
    price: number
    isFoodItem: boolean
    nutritionDetails?: InputJsonValue | null
    classification?: string | null
    manualCorrection?: boolean
  }

  export type ItemCreateOrConnectWithoutReceiptInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutReceiptInput, ItemUncheckedCreateWithoutReceiptInput>
  }

  export type ItemCreateManyReceiptInputEnvelope = {
    data: ItemCreateManyReceiptInput | ItemCreateManyReceiptInput[]
  }

  export type UserUpsertWithoutReceiptsInput = {
    update: XOR<UserUpdateWithoutReceiptsInput, UserUncheckedUpdateWithoutReceiptsInput>
    create: XOR<UserCreateWithoutReceiptsInput, UserUncheckedCreateWithoutReceiptsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceiptsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceiptsInput, UserUncheckedUpdateWithoutReceiptsInput>
  }

  export type UserUpdateWithoutReceiptsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: InputJsonValue | InputJsonValue | null
    nutritionSummary?: UserNutritionSummaryUpdateOneWithoutUserNestedInput
    groceryList?: GroceryListUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceiptsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: InputJsonValue | InputJsonValue | null
    nutritionSummary?: UserNutritionSummaryUncheckedUpdateOneWithoutUserNestedInput
    groceryList?: GroceryListUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ItemUpsertWithWhereUniqueWithoutReceiptInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutReceiptInput, ItemUncheckedUpdateWithoutReceiptInput>
    create: XOR<ItemCreateWithoutReceiptInput, ItemUncheckedCreateWithoutReceiptInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutReceiptInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutReceiptInput, ItemUncheckedUpdateWithoutReceiptInput>
  }

  export type ItemUpdateManyWithWhereWithoutReceiptInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutReceiptInput>
  }

  export type ItemScalarWhereInput = {
    AND?: ItemScalarWhereInput | ItemScalarWhereInput[]
    OR?: ItemScalarWhereInput[]
    NOT?: ItemScalarWhereInput | ItemScalarWhereInput[]
    id?: StringFilter<"Item"> | string
    originalBillLabel?: StringFilter<"Item"> | string
    aiSuggestedName?: StringFilter<"Item"> | string
    price?: FloatFilter<"Item"> | number
    isFoodItem?: BoolFilter<"Item"> | boolean
    nutritionDetails?: JsonNullableFilter<"Item">
    classification?: StringNullableFilter<"Item"> | string | null
    manualCorrection?: BoolFilter<"Item"> | boolean
    receiptId?: StringFilter<"Item"> | string
  }

  export type ReceiptCreateWithoutItemsInput = {
    id?: string
    uploadedAt?: Date | string
    purchaseDate: Date | string
    imageUrl: string
    originalRawText: string
    totalAmount: number
    currency: string
    nutritionSummary?: InputJsonValue | null
    aiFeedbackReceipt?: string | null
    status: string
    user: UserCreateNestedOneWithoutReceiptsInput
  }

  export type ReceiptUncheckedCreateWithoutItemsInput = {
    id?: string
    uploadedAt?: Date | string
    purchaseDate: Date | string
    imageUrl: string
    originalRawText: string
    totalAmount: number
    currency: string
    nutritionSummary?: InputJsonValue | null
    aiFeedbackReceipt?: string | null
    status: string
    userId: string
  }

  export type ReceiptCreateOrConnectWithoutItemsInput = {
    where: ReceiptWhereUniqueInput
    create: XOR<ReceiptCreateWithoutItemsInput, ReceiptUncheckedCreateWithoutItemsInput>
  }

  export type ReceiptUpsertWithoutItemsInput = {
    update: XOR<ReceiptUpdateWithoutItemsInput, ReceiptUncheckedUpdateWithoutItemsInput>
    create: XOR<ReceiptCreateWithoutItemsInput, ReceiptUncheckedCreateWithoutItemsInput>
    where?: ReceiptWhereInput
  }

  export type ReceiptUpdateToOneWithWhereWithoutItemsInput = {
    where?: ReceiptWhereInput
    data: XOR<ReceiptUpdateWithoutItemsInput, ReceiptUncheckedUpdateWithoutItemsInput>
  }

  export type ReceiptUpdateWithoutItemsInput = {
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    originalRawText?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    nutritionSummary?: InputJsonValue | InputJsonValue | null
    aiFeedbackReceipt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutReceiptsNestedInput
  }

  export type ReceiptUncheckedUpdateWithoutItemsInput = {
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    originalRawText?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    nutritionSummary?: InputJsonValue | InputJsonValue | null
    aiFeedbackReceipt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutNutritionSummaryInput = {
    id?: string
    createdAt?: Date | string
    lastLogin?: Date | string
    displayName?: string | null
    preferences?: InputJsonValue | null
    receipts?: ReceiptCreateNestedManyWithoutUserInput
    groceryList?: GroceryListCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNutritionSummaryInput = {
    id?: string
    createdAt?: Date | string
    lastLogin?: Date | string
    displayName?: string | null
    preferences?: InputJsonValue | null
    receipts?: ReceiptUncheckedCreateNestedManyWithoutUserInput
    groceryList?: GroceryListUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNutritionSummaryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNutritionSummaryInput, UserUncheckedCreateWithoutNutritionSummaryInput>
  }

  export type UserUpsertWithoutNutritionSummaryInput = {
    update: XOR<UserUpdateWithoutNutritionSummaryInput, UserUncheckedUpdateWithoutNutritionSummaryInput>
    create: XOR<UserCreateWithoutNutritionSummaryInput, UserUncheckedCreateWithoutNutritionSummaryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNutritionSummaryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNutritionSummaryInput, UserUncheckedUpdateWithoutNutritionSummaryInput>
  }

  export type UserUpdateWithoutNutritionSummaryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: InputJsonValue | InputJsonValue | null
    receipts?: ReceiptUpdateManyWithoutUserNestedInput
    groceryList?: GroceryListUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNutritionSummaryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: InputJsonValue | InputJsonValue | null
    receipts?: ReceiptUncheckedUpdateManyWithoutUserNestedInput
    groceryList?: GroceryListUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutGroceryListInput = {
    id?: string
    createdAt?: Date | string
    lastLogin?: Date | string
    displayName?: string | null
    preferences?: InputJsonValue | null
    receipts?: ReceiptCreateNestedManyWithoutUserInput
    nutritionSummary?: UserNutritionSummaryCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGroceryListInput = {
    id?: string
    createdAt?: Date | string
    lastLogin?: Date | string
    displayName?: string | null
    preferences?: InputJsonValue | null
    receipts?: ReceiptUncheckedCreateNestedManyWithoutUserInput
    nutritionSummary?: UserNutritionSummaryUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGroceryListInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGroceryListInput, UserUncheckedCreateWithoutGroceryListInput>
  }

  export type UserUpsertWithoutGroceryListInput = {
    update: XOR<UserUpdateWithoutGroceryListInput, UserUncheckedUpdateWithoutGroceryListInput>
    create: XOR<UserCreateWithoutGroceryListInput, UserUncheckedCreateWithoutGroceryListInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGroceryListInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGroceryListInput, UserUncheckedUpdateWithoutGroceryListInput>
  }

  export type UserUpdateWithoutGroceryListInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: InputJsonValue | InputJsonValue | null
    receipts?: ReceiptUpdateManyWithoutUserNestedInput
    nutritionSummary?: UserNutritionSummaryUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGroceryListInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: InputJsonValue | InputJsonValue | null
    receipts?: ReceiptUncheckedUpdateManyWithoutUserNestedInput
    nutritionSummary?: UserNutritionSummaryUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ReceiptCreateManyUserInput = {
    id?: string
    uploadedAt?: Date | string
    purchaseDate: Date | string
    imageUrl: string
    originalRawText: string
    totalAmount: number
    currency: string
    nutritionSummary?: InputJsonValue | null
    aiFeedbackReceipt?: string | null
    status: string
  }

  export type ReceiptUpdateWithoutUserInput = {
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    originalRawText?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    nutritionSummary?: InputJsonValue | InputJsonValue | null
    aiFeedbackReceipt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    items?: ItemUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateWithoutUserInput = {
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    originalRawText?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    nutritionSummary?: InputJsonValue | InputJsonValue | null
    aiFeedbackReceipt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    items?: ItemUncheckedUpdateManyWithoutReceiptNestedInput
  }

  export type ReceiptUncheckedUpdateManyWithoutUserInput = {
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    originalRawText?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    nutritionSummary?: InputJsonValue | InputJsonValue | null
    aiFeedbackReceipt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ItemCreateManyReceiptInput = {
    id?: string
    originalBillLabel: string
    aiSuggestedName: string
    price: number
    isFoodItem: boolean
    nutritionDetails?: InputJsonValue | null
    classification?: string | null
    manualCorrection?: boolean
  }

  export type ItemUpdateWithoutReceiptInput = {
    originalBillLabel?: StringFieldUpdateOperationsInput | string
    aiSuggestedName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isFoodItem?: BoolFieldUpdateOperationsInput | boolean
    nutritionDetails?: InputJsonValue | InputJsonValue | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    manualCorrection?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ItemUncheckedUpdateWithoutReceiptInput = {
    originalBillLabel?: StringFieldUpdateOperationsInput | string
    aiSuggestedName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isFoodItem?: BoolFieldUpdateOperationsInput | boolean
    nutritionDetails?: InputJsonValue | InputJsonValue | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    manualCorrection?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ItemUncheckedUpdateManyWithoutReceiptInput = {
    originalBillLabel?: StringFieldUpdateOperationsInput | string
    aiSuggestedName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    isFoodItem?: BoolFieldUpdateOperationsInput | boolean
    nutritionDetails?: InputJsonValue | InputJsonValue | null
    classification?: NullableStringFieldUpdateOperationsInput | string | null
    manualCorrection?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReceiptCountOutputTypeDefaultArgs instead
     */
    export type ReceiptCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReceiptCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReceiptDefaultArgs instead
     */
    export type ReceiptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReceiptDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemDefaultArgs instead
     */
    export type ItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserNutritionSummaryDefaultArgs instead
     */
    export type UserNutritionSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserNutritionSummaryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroceryListDefaultArgs instead
     */
    export type GroceryListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroceryListDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}